{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Automated ML\n",
        "\n",
        "TODO: Import Dependencies. In the cell below, import all the dependencies that you will need to complete the project."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import logging\r\n",
        "import os\r\n",
        "import csv\r\n",
        "\r\n",
        "from matplotlib import pyplot as plt\r\n",
        "import numpy as np\r\n",
        "import pandas as pd\r\n",
        "from sklearn import datasets\r\n",
        "import pkg_resources\r\n",
        "\r\n",
        "import azureml.core\r\n",
        "from azureml.core.experiment import Experiment\r\n",
        "from azureml.core.workspace import Workspace\r\n",
        "from azureml.train.automl import AutoMLConfig\r\n",
        "from azureml.core.dataset import Dataset\r\n",
        "\r\n",
        "from azureml.pipeline.steps import AutoMLStep\r\n",
        "\r\n",
        "# Check core SDK version number\r\n",
        "print(\"SDK version:\", azureml.core.VERSION)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SDK version: 1.30.0\n"
          ]
        }
      ],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1624546420263
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Dataset\n",
        "\n",
        "### Overview\n",
        "TODO: In this markdown cell, give an overview of the dataset you are using. Also mention the task you will be performing.\n",
        "\n",
        "\n",
        "TODO: Get data. In the cell below, write code to access the data you will be using in this project. Remember that the dataset needs to be external."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "ws = Workspace.from_config()\n",
        "\n",
        "# choose a name for experiment\n",
        "experiment_name = 'CapstoneProject'\n",
        "project_folder = './capstone-project'\n",
        "\n",
        "experiment=Experiment(ws, experiment_name)\n",
        "experiment"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 2,
          "data": {
            "text/plain": "Experiment(Name: CapstoneProject,\nWorkspace: quick-starts-ws-147903)",
            "text/html": "<table style=\"width:100%\"><tr><th>Name</th><th>Workspace</th><th>Report Page</th><th>Docs Page</th></tr><tr><td>CapstoneProject</td><td>quick-starts-ws-147903</td><td><a href=\"https://ml.azure.com/experiments/id/756ebcfe-e43f-4b8d-88b6-2da4c1e7fb23?wsid=/subscriptions/b968fb36-f06a-4c76-a15f-afab68ae7667/resourcegroups/aml-quickstarts-147903/workspaces/quick-starts-ws-147903&amp;tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td><td><a href=\"https://docs.microsoft.com/en-us/python/api/azureml-core/azureml.core.experiment.Experiment?view=azure-ml-py\" target=\"_blank\" rel=\"noopener\">Link to Documentation</a></td></tr></table>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 2,
      "metadata": {
        "gather": {
          "logged": 1624546421545
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Setting up the compute cluster\r\n",
        "\r\n",
        "from azureml.core.compute import AmlCompute\r\n",
        "from azureml.core.compute import ComputeTarget\r\n",
        "from azureml.core.compute_target import ComputeTargetException\r\n",
        "\r\n",
        "# NOTE: update the cluster name to match the existing cluster\r\n",
        "# Choose a name for your CPU cluster\r\n",
        "amlcompute_cluster_name = \"CapstoneAML\"\r\n",
        "\r\n",
        "# Verify that cluster does not exist already\r\n",
        "try:\r\n",
        "    compute_target = ComputeTarget(workspace=ws, name=amlcompute_cluster_name)\r\n",
        "    print('Found existing cluster, use it.')\r\n",
        "except ComputeTargetException:\r\n",
        "    compute_config = AmlCompute.provisioning_configuration(vm_size='STANDARD_DS3_V2',\r\n",
        "                                                           min_nodes=1, # for GPU, use \"STANDARD_NC6\"\r\n",
        "                                                           #vm_priority = 'lowpriority', # optional\r\n",
        "                                                           max_nodes=6)\r\n",
        "    compute_target = ComputeTarget.create(ws, amlcompute_cluster_name, compute_config)\r\n",
        "\r\n",
        "compute_target.wait_for_completion(show_output=True, min_node_count = 1, timeout_in_minutes = 10)\r\n",
        "# For a more detailed view of current AmlCompute status, use get_status()."
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Creating........\n",
            "SucceededProvisioning operation finished, operation \"Succeeded\"\n",
            "Succeeded...........................\n",
            "AmlCompute wait for completion finished\n",
            "\n",
            "Minimum number of nodes requested have been provisioned\n"
          ]
        }
      ],
      "execution_count": 3,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1624546610971
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "found = False\r\n",
        "key = \"HeartFailureRate\"\r\n",
        "description_text = \"Dataset for heart failure recommendation\"\r\n",
        "\r\n",
        "from azureml.core import Dataset\r\n",
        "\r\n",
        "datastore = ws.get_default_datastore()\r\n",
        "datastore.upload_files(files = ['../heart_failure_clinical_records_dataset.csv'],\r\n",
        "                       target_path = 'train-dataset/tabular/',\r\n",
        "                       overwrite = True,\r\n",
        "                       show_progress = True)\r\n",
        "\r\n",
        "if key in ws.datasets.keys(): \r\n",
        "        found = True\r\n",
        "        dataset = ws.datasets[key]\r\n",
        "        df = dataset.to_pandas_dataframe()\r\n",
        "\r\n",
        "else:\r\n",
        "        dataset = Dataset.Tabular.from_delimited_files(path = [(datastore, 'train-dataset/tabular/heart_failure_clinical_records_dataset.csv')])\r\n",
        "        # preview the first 3 rows of the dataset\r\n",
        "        df= dataset.to_pandas_dataframe()\r\n",
        "\r\n",
        "\r\n",
        "df.describe()\r\n",
        "\r\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Uploading an estimated of 1 files\n",
            "Uploading ../heart_failure_clinical_records_dataset.csv\n",
            "Uploaded ../heart_failure_clinical_records_dataset.csv, 1 files out of an estimated total of 1\n",
            "Uploaded 1 files\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 14,
          "data": {
            "text/plain": "              age     anaemia  creatinine_phosphokinase    diabetes  \\\ncount  299.000000  299.000000                299.000000  299.000000   \nmean    60.833893    0.431438                581.839465    0.418060   \nstd     11.894809    0.496107                970.287881    0.494067   \nmin     40.000000    0.000000                 23.000000    0.000000   \n25%     51.000000    0.000000                116.500000    0.000000   \n50%     60.000000    0.000000                250.000000    0.000000   \n75%     70.000000    1.000000                582.000000    1.000000   \nmax     95.000000    1.000000               7861.000000    1.000000   \n\n       ejection_fraction  high_blood_pressure      platelets  \\\ncount         299.000000           299.000000     299.000000   \nmean           38.083612             0.351171  263358.029264   \nstd            11.834841             0.478136   97804.236869   \nmin            14.000000             0.000000   25100.000000   \n25%            30.000000             0.000000  212500.000000   \n50%            38.000000             0.000000  262000.000000   \n75%            45.000000             1.000000  303500.000000   \nmax            80.000000             1.000000  850000.000000   \n\n       serum_creatinine  serum_sodium         sex    smoking        time  \\\ncount         299.00000    299.000000  299.000000  299.00000  299.000000   \nmean            1.39388    136.625418    0.648829    0.32107  130.260870   \nstd             1.03451      4.412477    0.478136    0.46767   77.614208   \nmin             0.50000    113.000000    0.000000    0.00000    4.000000   \n25%             0.90000    134.000000    0.000000    0.00000   73.000000   \n50%             1.10000    137.000000    1.000000    0.00000  115.000000   \n75%             1.40000    140.000000    1.000000    1.00000  203.000000   \nmax             9.40000    148.000000    1.000000    1.00000  285.000000   \n\n       DEATH_EVENT  \ncount    299.00000  \nmean       0.32107  \nstd        0.46767  \nmin        0.00000  \n25%        0.00000  \n50%        0.00000  \n75%        1.00000  \nmax        1.00000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>anaemia</th>\n      <th>creatinine_phosphokinase</th>\n      <th>diabetes</th>\n      <th>ejection_fraction</th>\n      <th>high_blood_pressure</th>\n      <th>platelets</th>\n      <th>serum_creatinine</th>\n      <th>serum_sodium</th>\n      <th>sex</th>\n      <th>smoking</th>\n      <th>time</th>\n      <th>DEATH_EVENT</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>299.000000</td>\n      <td>299.000000</td>\n      <td>299.000000</td>\n      <td>299.000000</td>\n      <td>299.000000</td>\n      <td>299.000000</td>\n      <td>299.000000</td>\n      <td>299.00000</td>\n      <td>299.000000</td>\n      <td>299.000000</td>\n      <td>299.00000</td>\n      <td>299.000000</td>\n      <td>299.00000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>60.833893</td>\n      <td>0.431438</td>\n      <td>581.839465</td>\n      <td>0.418060</td>\n      <td>38.083612</td>\n      <td>0.351171</td>\n      <td>263358.029264</td>\n      <td>1.39388</td>\n      <td>136.625418</td>\n      <td>0.648829</td>\n      <td>0.32107</td>\n      <td>130.260870</td>\n      <td>0.32107</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>11.894809</td>\n      <td>0.496107</td>\n      <td>970.287881</td>\n      <td>0.494067</td>\n      <td>11.834841</td>\n      <td>0.478136</td>\n      <td>97804.236869</td>\n      <td>1.03451</td>\n      <td>4.412477</td>\n      <td>0.478136</td>\n      <td>0.46767</td>\n      <td>77.614208</td>\n      <td>0.46767</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>40.000000</td>\n      <td>0.000000</td>\n      <td>23.000000</td>\n      <td>0.000000</td>\n      <td>14.000000</td>\n      <td>0.000000</td>\n      <td>25100.000000</td>\n      <td>0.50000</td>\n      <td>113.000000</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>4.000000</td>\n      <td>0.00000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>51.000000</td>\n      <td>0.000000</td>\n      <td>116.500000</td>\n      <td>0.000000</td>\n      <td>30.000000</td>\n      <td>0.000000</td>\n      <td>212500.000000</td>\n      <td>0.90000</td>\n      <td>134.000000</td>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>73.000000</td>\n      <td>0.00000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>60.000000</td>\n      <td>0.000000</td>\n      <td>250.000000</td>\n      <td>0.000000</td>\n      <td>38.000000</td>\n      <td>0.000000</td>\n      <td>262000.000000</td>\n      <td>1.10000</td>\n      <td>137.000000</td>\n      <td>1.000000</td>\n      <td>0.00000</td>\n      <td>115.000000</td>\n      <td>0.00000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>70.000000</td>\n      <td>1.000000</td>\n      <td>582.000000</td>\n      <td>1.000000</td>\n      <td>45.000000</td>\n      <td>1.000000</td>\n      <td>303500.000000</td>\n      <td>1.40000</td>\n      <td>140.000000</td>\n      <td>1.000000</td>\n      <td>1.00000</td>\n      <td>203.000000</td>\n      <td>1.00000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>95.000000</td>\n      <td>1.000000</td>\n      <td>7861.000000</td>\n      <td>1.000000</td>\n      <td>80.000000</td>\n      <td>1.000000</td>\n      <td>850000.000000</td>\n      <td>9.40000</td>\n      <td>148.000000</td>\n      <td>1.000000</td>\n      <td>1.00000</td>\n      <td>285.000000</td>\n      <td>1.00000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 14,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1624547999750
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## AutoML Configuration\n",
        "\n",
        "TODO: Explain why you chose the automl settings and cofiguration you used below.\n",
        "\n",
        "I have chosen experimentation time out as the dataset is smaller and it can be covered within 20 minutes. \n",
        "The max concurrent iteration is 5 ( 1 less than total number of compute nodes in the cluster). \n",
        "The primary_metric is chosen as AUC_weighted orginally to handle balanced data better. \n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# TODO: Put your automl settings here\n",
        "automl_settings = {\n",
        "    \"experiment_timeout_minutes\": 20,\n",
        "    \"max_concurrent_iterations\": 5,\n",
        "    \"primary_metric\" : 'accuracy'\n",
        "}\n",
        "\n",
        "# TODO: Put your automl config here\n",
        "automl_config = AutoMLConfig(compute_target=compute_target,\n",
        "                             task = \"classification\",\n",
        "                             training_data=dataset,\n",
        "                             label_column_name=\"DEATH_EVENT\",   \n",
        "                             path = project_folder,\n",
        "                             enable_early_stopping= True,\n",
        "                             featurization= 'auto',\n",
        "                             debug_log = \"automl_errors.log\",\n",
        "                             **automl_settings\n",
        "                            )"
      ],
      "outputs": [],
      "execution_count": 15,
      "metadata": {
        "gather": {
          "logged": 1624548004544
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# TODO: Submit your experiment\n",
        "remote_run = experiment.submit(automl_config,show_output=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Submitting remote run.\n",
            "No run_configuration provided, running on CapstoneAML with default configuration\n",
            "Running on remote compute: CapstoneAML\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<IPython.core.display.HTML object>",
            "text/html": "<table style=\"width:100%\"><tr><th>Experiment</th><th>Id</th><th>Type</th><th>Status</th><th>Details Page</th><th>Docs Page</th></tr><tr><td>CapstoneProject</td><td>AutoML_f5189558-a546-4ea4-b854-4d47f3721898</td><td>automl</td><td>NotStarted</td><td><a href=\"https://ml.azure.com/runs/AutoML_f5189558-a546-4ea4-b854-4d47f3721898?wsid=/subscriptions/b968fb36-f06a-4c76-a15f-afab68ae7667/resourcegroups/aml-quickstarts-147903/workspaces/quick-starts-ws-147903&amp;tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td><td><a href=\"https://docs.microsoft.com/en-us/python/api/overview/azure/ml/intro?view=azure-ml-py\" target=\"_blank\" rel=\"noopener\">Link to Documentation</a></td></tr></table>"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Current status: FeaturesGeneration. Generating features for the dataset.\n",
            "Current status: ModelSelection. Beginning model selection.\n",
            "\n",
            "****************************************************************************************************\n",
            "DATA GUARDRAILS: \n",
            "\n",
            "TYPE:         Cross validation\n",
            "STATUS:       DONE\n",
            "DESCRIPTION:  Each iteration of the trained model was validated through cross-validation.\n",
            "              \n",
            "DETAILS:      \n",
            "+---------------------------------+\n",
            "|Number of folds                  |\n",
            "+=================================+\n",
            "|10                               |\n",
            "+---------------------------------+\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "TYPE:         Class balancing detection\n",
            "STATUS:       PASSED\n",
            "DESCRIPTION:  Your inputs were analyzed, and all classes are balanced in your training data.\n",
            "              Learn more about imbalanced data: https://aka.ms/AutomatedMLImbalancedData\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "TYPE:         Missing feature values imputation\n",
            "STATUS:       PASSED\n",
            "DESCRIPTION:  No feature missing values were detected in the training data.\n",
            "              Learn more about missing value imputation: https://aka.ms/AutomatedMLFeaturization\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "TYPE:         High cardinality feature detection\n",
            "STATUS:       PASSED\n",
            "DESCRIPTION:  Your inputs were analyzed, and no high cardinality features were detected.\n",
            "              Learn more about high cardinality feature handling: https://aka.ms/AutomatedMLFeaturization\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "****************************************************************************************************\n",
            "ITERATION: The iteration being evaluated.\n",
            "PIPELINE: A summary description of the pipeline being evaluated.\n",
            "DURATION: Time taken for the current iteration.\n",
            "METRIC: The result of computing score on the fitted pipeline.\n",
            "BEST: The best observed score thus far.\n",
            "****************************************************************************************************\n",
            "\n",
            " ITERATION   PIPELINE                                       DURATION      METRIC      BEST\n",
            "         0   MaxAbsScaler LightGBM                          0:00:40       0.8360    0.8360\n",
            "         2   MinMaxScaler RandomForest                      0:00:40       0.8328    0.8360\n",
            "         3   MinMaxScaler RandomForest                      0:00:38       0.8460    0.8460\n",
            "         7   MinMaxScaler SVM                               0:00:39       0.7293    0.8460\n",
            "         4   MinMaxScaler RandomForest                      0:01:21       0.8428    0.8460\n",
            "         1   MaxAbsScaler XGBoostClassifier                 0:01:40       0.8359    0.8460\n",
            "         6   SparseNormalizer XGBoostClassifier             0:01:42       0.8361    0.8460\n",
            "         5   SparseNormalizer XGBoostClassifier             0:01:45       0.8497    0.8497\n",
            "         8   MaxAbsScaler GradientBoosting                  0:00:38       0.8391    0.8497\n",
            "         9   SparseNormalizer XGBoostClassifier             0:00:38       0.8093    0.8497\n",
            "        10   StandardScalerWrapper LightGBM                 0:00:37       0.8325    0.8497\n",
            "        11   SparseNormalizer XGBoostClassifier             0:00:39       0.8262    0.8497\n",
            "        12   StandardScalerWrapper RandomForest             0:00:36       0.8361    0.8497\n",
            "        13   SparseNormalizer LightGBM                      0:00:37       0.7560    0.8497\n",
            "        14   StandardScalerWrapper XGBoostClassifier        0:00:37       0.8195    0.8497\n",
            "        15   MinMaxScaler LightGBM                          0:00:38       0.8261    0.8497\n",
            "        16   MaxAbsScaler LightGBM                          0:00:38       0.8393    0.8497\n",
            "        17   MaxAbsScaler LightGBM                          0:00:35       0.8393    0.8497\n",
            "        18   StandardScalerWrapper LightGBM                 0:00:38       0.8359    0.8497\n",
            "        19   SparseNormalizer XGBoostClassifier             0:00:38       0.8495    0.8497\n",
            "        20   StandardScalerWrapper RandomForest             0:00:38       0.8361    0.8497\n",
            "        21   SparseNormalizer XGBoostClassifier             0:00:37       0.8331    0.8497\n",
            "        22   StandardScalerWrapper LightGBM                 0:00:37       0.8492    0.8497\n",
            "        24   StandardScalerWrapper LightGBM                 0:00:31       0.7725    0.8497\n",
            "        25   PCA XGBoostClassifier                          0:00:36       0.6825    0.8497\n",
            "        26   MaxAbsScaler LightGBM                          0:00:36       0.8561    0.8561\n",
            "        27   MaxAbsScaler LightGBM                          0:00:39       0.7757    0.8561\n",
            "        28   StandardScalerWrapper LightGBM                 0:00:36       0.8393    0.8561\n",
            "        23   StandardScalerWrapper LightGBM                 0:01:47       0.8393    0.8561\n",
            "        29   SparseNormalizer RandomForest                  0:00:36       0.8062    0.8561\n",
            "        30   MaxAbsScaler LightGBM                          0:00:39       0.8561    0.8561\n",
            "        31   MaxAbsScaler LightGBM                          0:00:41       0.8493    0.8561\n",
            "        32   MaxAbsScaler RandomForest                      0:00:44       0.8191    0.8561\n",
            "        33   RobustScaler RandomForest                      0:00:42       0.8156    0.8561\n",
            "        34   MaxAbsScaler LightGBM                          0:00:39       0.8426    0.8561\n",
            "        35   StandardScalerWrapper LightGBM                 0:00:37       0.8359    0.8561\n",
            "        36   MaxAbsScaler RandomForest                      0:00:36       0.8056    0.8561\n",
            "        37   StandardScalerWrapper LightGBM                 0:00:39       0.8493    0.8561\n",
            "        38   SparseNormalizer XGBoostClassifier             0:00:34       0.8495    0.8561\n",
            "        39   StandardScalerWrapper XGBoostClassifier        0:00:39       0.8359    0.8561\n",
            "        40   SparseNormalizer LightGBM                      0:00:41       0.8428    0.8561\n",
            "        41   SparseNormalizer XGBoostClassifier             0:00:39       0.8362    0.8561\n",
            "        42                                                  0:00:07          nan    0.8561\n",
            "        43                                                  0:00:14          nan    0.8561\n",
            "        44    VotingEnsemble                                0:00:55       0.8797    0.8797\n",
            "        45    StackEnsemble                                 0:00:59       0.8697    0.8797\n"
          ]
        }
      ],
      "execution_count": 16,
      "metadata": {
        "gather": {
          "logged": 1624548894691
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Run Details\n",
        "\n",
        "OPTIONAL: Write about the different models trained and their performance. Why do you think some models did better than others?\n",
        "\n",
        "TODO: In the cell below, use the `RunDetails` widget to show the different experiments."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.widgets import RunDetails\r\n",
        "RunDetails(remote_run).show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_AutoMLWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO', 's…",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "17ba1f239716421d8b31642de6ad55c0"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/runs/AutoML_f5189558-a546-4ea4-b854-4d47f3721898?wsid=/subscriptions/b968fb36-f06a-4c76-a15f-afab68ae7667/resourcegroups/aml-quickstarts-147903/workspaces/quick-starts-ws-147903&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"run_properties\": {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"created_utc\": \"2021-06-24T15:20:16.290208Z\", \"properties\": {\"num_iterations\": \"1000\", \"training_type\": \"TrainFull\", \"acquisition_function\": \"EI\", \"primary_metric\": \"accuracy\", \"train_split\": \"0\", \"acquisition_parameter\": \"0\", \"num_cross_validation\": null, \"target\": \"CapstoneAML\", \"AMLSettingsJsonString\": \"{\\\"path\\\":null,\\\"name\\\":\\\"CapstoneProject\\\",\\\"subscription_id\\\":\\\"b968fb36-f06a-4c76-a15f-afab68ae7667\\\",\\\"resource_group\\\":\\\"aml-quickstarts-147903\\\",\\\"workspace_name\\\":\\\"quick-starts-ws-147903\\\",\\\"region\\\":\\\"southcentralus\\\",\\\"compute_target\\\":\\\"CapstoneAML\\\",\\\"spark_service\\\":null,\\\"azure_service\\\":\\\"remote\\\",\\\"many_models\\\":false,\\\"pipeline_fetch_max_batch_size\\\":1,\\\"enable_batch_run\\\":false,\\\"enable_run_restructure\\\":false,\\\"start_auxiliary_runs_before_parent_complete\\\":false,\\\"enable_code_generation\\\":false,\\\"iterations\\\":1000,\\\"primary_metric\\\":\\\"accuracy\\\",\\\"task_type\\\":\\\"classification\\\",\\\"data_script\\\":null,\\\"test_size\\\":0.0,\\\"validation_size\\\":0.0,\\\"n_cross_validations\\\":null,\\\"y_min\\\":null,\\\"y_max\\\":null,\\\"num_classes\\\":null,\\\"featurization\\\":\\\"auto\\\",\\\"_ignore_package_version_incompatibilities\\\":false,\\\"is_timeseries\\\":false,\\\"max_cores_per_iteration\\\":1,\\\"max_concurrent_iterations\\\":5,\\\"iteration_timeout_minutes\\\":null,\\\"mem_in_mb\\\":null,\\\"enforce_time_on_windows\\\":false,\\\"experiment_timeout_minutes\\\":20,\\\"experiment_exit_score\\\":null,\\\"whitelist_models\\\":null,\\\"blacklist_algos\\\":[\\\"TensorFlowLinearClassifier\\\",\\\"TensorFlowDNN\\\"],\\\"supported_models\\\":[\\\"DecisionTree\\\",\\\"SGD\\\",\\\"KNN\\\",\\\"AveragedPerceptronClassifier\\\",\\\"LogisticRegression\\\",\\\"ExtremeRandomTrees\\\",\\\"GradientBoosting\\\",\\\"TensorFlowLinearClassifier\\\",\\\"TensorFlowDNN\\\",\\\"BernoulliNaiveBayes\\\",\\\"LightGBM\\\",\\\"RandomForest\\\",\\\"LinearSVM\\\",\\\"XGBoostClassifier\\\",\\\"SVM\\\",\\\"MultinomialNaiveBayes\\\"],\\\"private_models\\\":[],\\\"auto_blacklist\\\":true,\\\"blacklist_samples_reached\\\":false,\\\"exclude_nan_labels\\\":true,\\\"verbosity\\\":20,\\\"_debug_log\\\":\\\"azureml_automl.log\\\",\\\"show_warnings\\\":false,\\\"model_explainability\\\":true,\\\"service_url\\\":null,\\\"sdk_url\\\":null,\\\"sdk_packages\\\":null,\\\"enable_onnx_compatible_models\\\":false,\\\"enable_split_onnx_featurizer_estimator_models\\\":false,\\\"vm_type\\\":\\\"STANDARD_DS3_V2\\\",\\\"telemetry_verbosity\\\":20,\\\"send_telemetry\\\":true,\\\"enable_dnn\\\":false,\\\"scenario\\\":\\\"SDK-1.13.0\\\",\\\"environment_label\\\":null,\\\"save_mlflow\\\":false,\\\"force_text_dnn\\\":false,\\\"enable_feature_sweeping\\\":true,\\\"enable_early_stopping\\\":true,\\\"early_stopping_n_iters\\\":10,\\\"metrics\\\":null,\\\"enable_metric_confidence\\\":false,\\\"enable_ensembling\\\":true,\\\"enable_stack_ensembling\\\":true,\\\"ensemble_iterations\\\":15,\\\"enable_tf\\\":false,\\\"enable_subsampling\\\":null,\\\"subsample_seed\\\":null,\\\"enable_nimbusml\\\":false,\\\"enable_streaming\\\":false,\\\"force_streaming\\\":false,\\\"track_child_runs\\\":true,\\\"allowed_private_models\\\":[],\\\"label_column_name\\\":\\\"DEATH_EVENT\\\",\\\"weight_column_name\\\":null,\\\"cv_split_column_names\\\":null,\\\"enable_local_managed\\\":false,\\\"_local_managed_run_id\\\":null,\\\"cost_mode\\\":1,\\\"lag_length\\\":0,\\\"metric_operation\\\":\\\"maximize\\\",\\\"preprocess\\\":true}\", \"DataPrepJsonString\": \"{\\\\\\\"training_data\\\\\\\": {\\\\\\\"datasetId\\\\\\\": \\\\\\\"ad94de96-3e56-44dd-b475-d7fbe04da7d0\\\\\\\"}, \\\\\\\"datasets\\\\\\\": 0}\", \"EnableSubsampling\": null, \"runTemplate\": \"AutoML\", \"azureml.runsource\": \"automl\", \"display_task_type\": \"classification\", \"dependencies_versions\": \"{\\\"azureml-widgets\\\": \\\"1.30.0\\\", \\\"azureml-train\\\": \\\"1.30.0\\\", \\\"azureml-train-restclients-hyperdrive\\\": \\\"1.30.0\\\", \\\"azureml-train-core\\\": \\\"1.30.0\\\", \\\"azureml-train-automl\\\": \\\"1.30.0\\\", \\\"azureml-train-automl-runtime\\\": \\\"1.30.0\\\", \\\"azureml-train-automl-client\\\": \\\"1.30.0\\\", \\\"azureml-tensorboard\\\": \\\"1.30.0\\\", \\\"azureml-telemetry\\\": \\\"1.30.0\\\", \\\"azureml-sdk\\\": \\\"1.30.0\\\", \\\"azureml-samples\\\": \\\"0+unknown\\\", \\\"azureml-pipeline\\\": \\\"1.30.0\\\", \\\"azureml-pipeline-steps\\\": \\\"1.30.0\\\", \\\"azureml-pipeline-core\\\": \\\"1.30.0\\\", \\\"azureml-opendatasets\\\": \\\"1.30.0\\\", \\\"azureml-model-management-sdk\\\": \\\"1.0.1b6.post1\\\", \\\"azureml-mlflow\\\": \\\"1.30.0\\\", \\\"azureml-interpret\\\": \\\"1.30.0\\\", \\\"azureml-explain-model\\\": \\\"1.30.0\\\", \\\"azureml-defaults\\\": \\\"1.30.0\\\", \\\"azureml-dataset-runtime\\\": \\\"1.30.0\\\", \\\"azureml-dataprep\\\": \\\"2.15.1\\\", \\\"azureml-dataprep-rslex\\\": \\\"1.13.0\\\", \\\"azureml-dataprep-native\\\": \\\"33.0.0\\\", \\\"azureml-datadrift\\\": \\\"1.30.0\\\", \\\"azureml-core\\\": \\\"1.30.0\\\", \\\"azureml-contrib-services\\\": \\\"1.30.0\\\", \\\"azureml-contrib-server\\\": \\\"1.30.0\\\", \\\"azureml-contrib-reinforcementlearning\\\": \\\"1.30.0\\\", \\\"azureml-contrib-pipeline-steps\\\": \\\"1.30.0\\\", \\\"azureml-contrib-notebook\\\": \\\"1.30.0\\\", \\\"azureml-contrib-fairness\\\": \\\"1.30.0\\\", \\\"azureml-contrib-dataset\\\": \\\"1.30.0\\\", \\\"azureml-cli-common\\\": \\\"1.30.0\\\", \\\"azureml-automl-runtime\\\": \\\"1.30.0\\\", \\\"azureml-automl-dnn-nlp\\\": \\\"1.30.0\\\", \\\"azureml-automl-core\\\": \\\"1.30.0\\\", \\\"azureml-accel-models\\\": \\\"1.30.0\\\"}\", \"_aml_system_scenario_identification\": \"Remote.Parent\", \"ClientType\": \"SDK\", \"environment_cpu_name\": \"AzureML-AutoML\", \"environment_cpu_label\": \"prod\", \"environment_gpu_name\": \"AzureML-AutoML-GPU\", \"environment_gpu_label\": \"prod\", \"root_attribution\": \"automl\", \"attribution\": \"AutoML\", \"Orchestrator\": \"AutoML\", \"CancelUri\": \"https://southcentralus.api.azureml.ms/jasmine/v1.0/subscriptions/b968fb36-f06a-4c76-a15f-afab68ae7667/resourceGroups/aml-quickstarts-147903/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-147903/experimentids/756ebcfe-e43f-4b8d-88b6-2da4c1e7fb23/cancel/AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"ClientSdkVersion\": \"1.30.0\", \"snapshotId\": \"00000000-0000-0000-0000-000000000000\", \"SetupRunId\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_setup\", \"SetupRunContainerId\": \"dcid.AutoML_f5189558-a546-4ea4-b854-4d47f3721898_setup\", \"FeaturizationRunJsonPath\": \"featurizer_container.json\", \"FeaturizationRunId\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_featurize\", \"ProblemInfoJsonString\": \"{\\\"dataset_num_categorical\\\": 0, \\\"is_sparse\\\": false, \\\"subsampling\\\": false, \\\"has_extra_col\\\": true, \\\"dataset_classes\\\": 2, \\\"dataset_features\\\": 12, \\\"dataset_samples\\\": 299, \\\"single_frequency_class_detected\\\": false}\", \"ModelExplainRunId\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_ModelExplain\", \"azureml.git.repository_uri\": \"https://github.com/arunanshupandey/nd00333-capstone.git\", \"mlflow.source.git.repoURL\": \"https://github.com/arunanshupandey/nd00333-capstone.git\", \"azureml.git.branch\": \"master\", \"mlflow.source.git.branch\": \"master\", \"azureml.git.commit\": \"7c2e6426cefa3e366d2b4981ee65acd26ee0344f\", \"mlflow.source.git.commit\": \"7c2e6426cefa3e366d2b4981ee65acd26ee0344f\", \"azureml.git.dirty\": \"False\"}, \"tags\": {\"model_explain_run\": \"best_run\", \"_aml_system_azureml.automlComponent\": \"AutoML\", \"pipeline_id\": \"\", \"score\": \"\", \"predicted_cost\": \"\", \"fit_time\": \"\", \"training_percent\": \"\", \"iteration\": \"\", \"run_preprocessor\": \"\", \"run_algorithm\": \"\", \"dynamic_whitelisting_iterations\": \"<25>;<30>;<35>;<40>;\", \"automl_best_child_run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_44\", \"model_explain_best_run_child_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_44\"}, \"end_time_utc\": \"2021-06-24T15:34:33.84051Z\", \"status\": \"Completed\", \"log_files\": {}, \"log_groups\": [], \"run_duration\": \"0:14:17\", \"run_number\": \"1\", \"run_queued_details\": {\"status\": \"Completed\", \"details\": null}}, \"child_runs\": [{\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_0\", \"run_number\": 5, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:23:23.509162Z\", \"end_time\": \"2021-06-24T15:24:03.297082Z\", \"created_time\": \"2021-06-24T15:23:11.625788Z\", \"created_time_dt\": \"2021-06-24T15:23:11.625788Z\", \"duration\": \"0:00:51\", \"iteration\": \"0\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83597701, \"best_metric\": 0.83597701}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_1\", \"run_number\": 6, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:25:37.381701Z\", \"end_time\": \"2021-06-24T15:27:17.044393Z\", \"created_time\": \"2021-06-24T15:23:11.665864Z\", \"created_time_dt\": \"2021-06-24T15:23:11.665864Z\", \"duration\": \"0:04:05\", \"iteration\": \"1\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, XGBoostClassifier\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83586207, \"best_metric\": 0.83597701}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_4\", \"run_number\": 7, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:25:35.823536Z\", \"end_time\": \"2021-06-24T15:26:57.152495Z\", \"created_time\": \"2021-06-24T15:23:11.666133Z\", \"created_time_dt\": \"2021-06-24T15:23:11.666133Z\", \"duration\": \"0:03:45\", \"iteration\": \"4\", \"goal\": \"accuracy_max\", \"run_name\": \"MinMaxScaler, RandomForest\", \"run_properties\": \"copy=True, feature_range=(0, 1\", \"primary_metric\": 0.84275862, \"best_metric\": 0.84597701}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_2\", \"run_number\": 8, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:24:17.735747Z\", \"end_time\": \"2021-06-24T15:24:57.6298Z\", \"created_time\": \"2021-06-24T15:23:11.676683Z\", \"created_time_dt\": \"2021-06-24T15:23:11.676683Z\", \"duration\": \"0:01:45\", \"iteration\": \"2\", \"goal\": \"accuracy_max\", \"run_name\": \"MinMaxScaler, RandomForest\", \"run_properties\": \"copy=True, feature_range=(0, 1\", \"primary_metric\": 0.83275862, \"best_metric\": 0.83597701}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_3\", \"run_number\": 9, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:25:16.73126Z\", \"end_time\": \"2021-06-24T15:25:54.845446Z\", \"created_time\": \"2021-06-24T15:23:11.698167Z\", \"created_time_dt\": \"2021-06-24T15:23:11.698167Z\", \"duration\": \"0:02:43\", \"iteration\": \"3\", \"goal\": \"accuracy_max\", \"run_name\": \"MinMaxScaler, RandomForest\", \"run_properties\": \"copy=True, feature_range=(0, 1\", \"primary_metric\": 0.84597701, \"best_metric\": 0.84597701}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_5\", \"run_number\": 10, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:25:38.544245Z\", \"end_time\": \"2021-06-24T15:27:23.867383Z\", \"created_time\": \"2021-06-24T15:24:04.74035Z\", \"created_time_dt\": \"2021-06-24T15:24:04.74035Z\", \"duration\": \"0:03:19\", \"iteration\": \"5\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='l1'\", \"primary_metric\": 0.84965517, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_6\", \"run_number\": 11, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:25:37.134129Z\", \"end_time\": \"2021-06-24T15:27:19.379832Z\", \"created_time\": \"2021-06-24T15:25:00.939187Z\", \"created_time_dt\": \"2021-06-24T15:25:00.939187Z\", \"duration\": \"0:02:18\", \"iteration\": \"6\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='l1'\", \"primary_metric\": 0.83609195, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_7\", \"run_number\": 12, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:26:07.260577Z\", \"end_time\": \"2021-06-24T15:26:46.407427Z\", \"created_time\": \"2021-06-24T15:25:56.966016Z\", \"created_time_dt\": \"2021-06-24T15:25:56.966016Z\", \"duration\": \"0:00:49\", \"iteration\": \"7\", \"goal\": \"accuracy_max\", \"run_name\": \"MinMaxScaler, SVM\", \"run_properties\": \"copy=True, feature_range=(0, 1\", \"primary_metric\": 0.72931034, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_8\", \"run_number\": 13, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:27:03.47559Z\", \"end_time\": \"2021-06-24T15:27:41.178803Z\", \"created_time\": \"2021-06-24T15:26:48.862473Z\", \"created_time_dt\": \"2021-06-24T15:26:48.862473Z\", \"duration\": \"0:00:52\", \"iteration\": \"8\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, GradientBoosting\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83908046, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_9\", \"run_number\": 14, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:27:13.720323Z\", \"end_time\": \"2021-06-24T15:27:51.237215Z\", \"created_time\": \"2021-06-24T15:26:59.083352Z\", \"created_time_dt\": \"2021-06-24T15:26:59.083352Z\", \"duration\": \"0:00:52\", \"iteration\": \"9\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='l1'\", \"primary_metric\": 0.80931034, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_10\", \"run_number\": 15, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:27:30.4559Z\", \"end_time\": \"2021-06-24T15:28:07.027741Z\", \"created_time\": \"2021-06-24T15:27:19.111194Z\", \"created_time_dt\": \"2021-06-24T15:27:19.111194Z\", \"duration\": \"0:00:47\", \"iteration\": \"10\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=True,\\n    with_std=False\\n\", \"primary_metric\": 0.83252874, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_11\", \"run_number\": 16, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:27:32.25216Z\", \"end_time\": \"2021-06-24T15:28:10.849061Z\", \"created_time\": \"2021-06-24T15:27:23.300387Z\", \"created_time_dt\": \"2021-06-24T15:27:23.300387Z\", \"duration\": \"0:00:47\", \"iteration\": \"11\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='l2'\", \"primary_metric\": 0.8262069, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_12\", \"run_number\": 17, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:27:36.727493Z\", \"end_time\": \"2021-06-24T15:28:13.127117Z\", \"created_time\": \"2021-06-24T15:27:26.58233Z\", \"created_time_dt\": \"2021-06-24T15:27:26.58233Z\", \"duration\": \"0:00:46\", \"iteration\": \"12\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, RandomForest\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.83609195, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_13\", \"run_number\": 18, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:27:57.004316Z\", \"end_time\": \"2021-06-24T15:28:34.445579Z\", \"created_time\": \"2021-06-24T15:27:43.120689Z\", \"created_time_dt\": \"2021-06-24T15:27:43.120689Z\", \"duration\": \"0:00:51\", \"iteration\": \"13\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, LightGBM\", \"run_properties\": \"copy=True, norm='l2'\", \"primary_metric\": 0.75597701, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_14\", \"run_number\": 19, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:28:05.410224Z\", \"end_time\": \"2021-06-24T15:28:42.35485Z\", \"created_time\": \"2021-06-24T15:27:53.257381Z\", \"created_time_dt\": \"2021-06-24T15:27:53.257381Z\", \"duration\": \"0:00:49\", \"iteration\": \"14\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.81954023, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_15\", \"run_number\": 20, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:28:25.474345Z\", \"end_time\": \"2021-06-24T15:29:03.581648Z\", \"created_time\": \"2021-06-24T15:28:08.901144Z\", \"created_time_dt\": \"2021-06-24T15:28:08.901144Z\", \"duration\": \"0:00:54\", \"iteration\": \"15\", \"goal\": \"accuracy_max\", \"run_name\": \"MinMaxScaler, LightGBM\", \"run_properties\": \"copy=True, feature_range=(0, 1\", \"primary_metric\": 0.82609195, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_16\", \"run_number\": 21, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:28:27.481061Z\", \"end_time\": \"2021-06-24T15:29:05.525373Z\", \"created_time\": \"2021-06-24T15:28:13.348976Z\", \"created_time_dt\": \"2021-06-24T15:28:13.348976Z\", \"duration\": \"0:00:52\", \"iteration\": \"16\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83931034, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_17\", \"run_number\": 22, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:28:30.852012Z\", \"end_time\": \"2021-06-24T15:29:05.704889Z\", \"created_time\": \"2021-06-24T15:28:16.531875Z\", \"created_time_dt\": \"2021-06-24T15:28:16.531875Z\", \"duration\": \"0:00:49\", \"iteration\": \"17\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.83931034, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_18\", \"run_number\": 23, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:28:51.500564Z\", \"end_time\": \"2021-06-24T15:29:29.080515Z\", \"created_time\": \"2021-06-24T15:28:36.379023Z\", \"created_time_dt\": \"2021-06-24T15:28:36.379023Z\", \"duration\": \"0:00:52\", \"iteration\": \"18\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.83586207, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_19\", \"run_number\": 24, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:28:58.675043Z\", \"end_time\": \"2021-06-24T15:29:36.261247Z\", \"created_time\": \"2021-06-24T15:28:44.234933Z\", \"created_time_dt\": \"2021-06-24T15:28:44.234933Z\", \"duration\": \"0:00:52\", \"iteration\": \"19\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='max'\", \"primary_metric\": 0.84954023, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_20\", \"run_number\": 25, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:29:19.646577Z\", \"end_time\": \"2021-06-24T15:29:57.183808Z\", \"created_time\": \"2021-06-24T15:29:05.607969Z\", \"created_time_dt\": \"2021-06-24T15:29:05.607969Z\", \"duration\": \"0:00:51\", \"iteration\": \"20\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, RandomForest\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.83609195, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_21\", \"run_number\": 26, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:29:21.423413Z\", \"end_time\": \"2021-06-24T15:29:58.306404Z\", \"created_time\": \"2021-06-24T15:29:08.979856Z\", \"created_time_dt\": \"2021-06-24T15:29:08.979856Z\", \"duration\": \"0:00:49\", \"iteration\": \"21\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='max'\", \"primary_metric\": 0.83310345, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_22\", \"run_number\": 27, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:29:20.919469Z\", \"end_time\": \"2021-06-24T15:29:57.856873Z\", \"created_time\": \"2021-06-24T15:29:09.040939Z\", \"created_time_dt\": \"2021-06-24T15:29:09.040939Z\", \"duration\": \"0:00:48\", \"iteration\": \"22\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.8491954, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_23\", \"run_number\": 28, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:29:42.998995Z\", \"end_time\": \"2021-06-24T15:31:30.431694Z\", \"created_time\": \"2021-06-24T15:29:30.9427Z\", \"created_time_dt\": \"2021-06-24T15:29:30.9427Z\", \"duration\": \"0:01:59\", \"iteration\": \"23\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.83931034, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_24\", \"run_number\": 29, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:30:02.449032Z\", \"end_time\": \"2021-06-24T15:30:33.492609Z\", \"created_time\": \"2021-06-24T15:29:38.419168Z\", \"created_time_dt\": \"2021-06-24T15:29:38.419168Z\", \"duration\": \"0:00:55\", \"iteration\": \"24\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=True,\\n    with_std=True\\n\", \"primary_metric\": 0.77252874, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_25\", \"run_number\": 30, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:30:09.133749Z\", \"end_time\": \"2021-06-24T15:30:44.965072Z\", \"created_time\": \"2021-06-24T15:30:00.309227Z\", \"created_time_dt\": \"2021-06-24T15:30:00.309227Z\", \"duration\": \"0:00:44\", \"iteration\": \"25\", \"goal\": \"accuracy_max\", \"run_name\": \"PCA, XGBoostClassifier\", \"run_properties\": \"copy=True, iterated_power='auto', n_components=0.05947368421052632,\\n    random_state=None, svd_solver='auto', tol=0.0, whiten=True\", \"primary_metric\": 0.68252874, \"best_metric\": 0.84965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_26\", \"run_number\": 31, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:30:12.10453Z\", \"end_time\": \"2021-06-24T15:30:47.927626Z\", \"created_time\": \"2021-06-24T15:30:04.697431Z\", \"created_time_dt\": \"2021-06-24T15:30:04.697431Z\", \"duration\": \"0:00:43\", \"iteration\": \"26\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.85609195, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_27\", \"run_number\": 32, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:30:14.594533Z\", \"end_time\": \"2021-06-24T15:30:53.700991Z\", \"created_time\": \"2021-06-24T15:30:04.72425Z\", \"created_time_dt\": \"2021-06-24T15:30:04.72425Z\", \"duration\": \"0:00:48\", \"iteration\": \"27\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.77574713, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_28\", \"run_number\": 33, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:30:44.423238Z\", \"end_time\": \"2021-06-24T15:31:20.512728Z\", \"created_time\": \"2021-06-24T15:30:35.263144Z\", \"created_time_dt\": \"2021-06-24T15:30:35.263144Z\", \"duration\": \"0:00:45\", \"iteration\": \"28\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.83931034, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_29\", \"run_number\": 34, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:30:54.567143Z\", \"end_time\": \"2021-06-24T15:31:30.360257Z\", \"created_time\": \"2021-06-24T15:30:47.17915Z\", \"created_time_dt\": \"2021-06-24T15:30:47.17915Z\", \"duration\": \"0:00:43\", \"iteration\": \"29\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, RandomForest\", \"run_properties\": \"copy=True, norm='l2'\", \"primary_metric\": 0.8062069, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_30\", \"run_number\": 35, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:30:59.042291Z\", \"end_time\": \"2021-06-24T15:31:37.618634Z\", \"created_time\": \"2021-06-24T15:30:51.331148Z\", \"created_time_dt\": \"2021-06-24T15:30:51.331148Z\", \"duration\": \"0:00:46\", \"iteration\": \"30\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.85609195, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_31\", \"run_number\": 36, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:31:04.061711Z\", \"end_time\": \"2021-06-24T15:31:45.27792Z\", \"created_time\": \"2021-06-24T15:30:55.591301Z\", \"created_time_dt\": \"2021-06-24T15:30:55.591301Z\", \"duration\": \"0:00:49\", \"iteration\": \"31\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84931034, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_32\", \"run_number\": 37, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:31:31.656363Z\", \"end_time\": \"2021-06-24T15:32:15.735615Z\", \"created_time\": \"2021-06-24T15:31:22.326272Z\", \"created_time_dt\": \"2021-06-24T15:31:22.326272Z\", \"duration\": \"0:00:53\", \"iteration\": \"32\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.81908046, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_33\", \"run_number\": 38, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:31:44.300456Z\", \"end_time\": \"2021-06-24T15:32:26.78276Z\", \"created_time\": \"2021-06-24T15:31:32.09882Z\", \"created_time_dt\": \"2021-06-24T15:31:32.09882Z\", \"duration\": \"0:00:54\", \"iteration\": \"33\", \"goal\": \"accuracy_max\", \"run_name\": \"RobustScaler, RandomForest\", \"run_properties\": \"copy=True, quantile_range=[10, 90], with_centering=True,\\n             with_scaling=True\", \"primary_metric\": 0.81563218, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_34\", \"run_number\": 39, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:31:39.744906Z\", \"end_time\": \"2021-06-24T15:32:18.289986Z\", \"created_time\": \"2021-06-24T15:31:32.118898Z\", \"created_time_dt\": \"2021-06-24T15:31:32.118898Z\", \"duration\": \"0:00:46\", \"iteration\": \"34\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.84264368, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_35\", \"run_number\": 40, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:31:52.74952Z\", \"end_time\": \"2021-06-24T15:32:29.700919Z\", \"created_time\": \"2021-06-24T15:31:40.466548Z\", \"created_time_dt\": \"2021-06-24T15:31:40.466548Z\", \"duration\": \"0:00:49\", \"iteration\": \"35\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=True\\n\", \"primary_metric\": 0.83586207, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_36\", \"run_number\": 41, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:31:54.868899Z\", \"end_time\": \"2021-06-24T15:32:30.72446Z\", \"created_time\": \"2021-06-24T15:31:47.304172Z\", \"created_time_dt\": \"2021-06-24T15:31:47.304172Z\", \"duration\": \"0:00:43\", \"iteration\": \"36\", \"goal\": \"accuracy_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.80563218, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_37\", \"run_number\": 42, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:32:26.692517Z\", \"end_time\": \"2021-06-24T15:33:05.316397Z\", \"created_time\": \"2021-06-24T15:32:17.690034Z\", \"created_time_dt\": \"2021-06-24T15:32:17.690034Z\", \"duration\": \"0:00:47\", \"iteration\": \"37\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, LightGBM\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.84931034, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_38\", \"run_number\": 43, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:32:32.473915Z\", \"end_time\": \"2021-06-24T15:33:06.334492Z\", \"created_time\": \"2021-06-24T15:32:22.09143Z\", \"created_time_dt\": \"2021-06-24T15:32:22.09143Z\", \"duration\": \"0:00:44\", \"iteration\": \"38\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='max'\", \"primary_metric\": 0.84954023, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_39\", \"run_number\": 44, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:32:37.38666Z\", \"end_time\": \"2021-06-24T15:33:16.013065Z\", \"created_time\": \"2021-06-24T15:32:28.793074Z\", \"created_time_dt\": \"2021-06-24T15:32:28.793074Z\", \"duration\": \"0:00:47\", \"iteration\": \"39\", \"goal\": \"accuracy_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"\\n    copy=True,\\n    with_mean=False,\\n    with_std=False\\n\", \"primary_metric\": 0.83586207, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_40\", \"run_number\": 45, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:32:41.273529Z\", \"end_time\": \"2021-06-24T15:33:22.339809Z\", \"created_time\": \"2021-06-24T15:32:33.965574Z\", \"created_time_dt\": \"2021-06-24T15:32:33.965574Z\", \"duration\": \"0:00:48\", \"iteration\": \"40\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, LightGBM\", \"run_properties\": \"copy=True, norm='max'\", \"primary_metric\": 0.84275862, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_41\", \"run_number\": 46, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:32:43.674792Z\", \"end_time\": \"2021-06-24T15:33:22.514578Z\", \"created_time\": \"2021-06-24T15:32:33.999815Z\", \"created_time_dt\": \"2021-06-24T15:32:33.999815Z\", \"duration\": \"0:00:48\", \"iteration\": \"41\", \"goal\": \"accuracy_max\", \"run_name\": \"SparseNormalizer, XGBoostClassifier\", \"run_properties\": \"copy=True, norm='l1'\", \"primary_metric\": 0.8362069, \"best_metric\": 0.85609195}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_42\", \"run_number\": 47, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:33:15.676894Z\", \"end_time\": \"2021-06-24T15:33:22.36855Z\", \"created_time\": \"2021-06-24T15:33:07.277352Z\", \"created_time_dt\": \"2021-06-24T15:33:07.277352Z\", \"duration\": \"0:00:15\", \"iteration\": \"42\", \"goal\": null, \"run_name\": \"Canceled\", \"run_properties\": null}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_43\", \"run_number\": 48, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:33:10.651613Z\", \"end_time\": \"2021-06-24T15:33:24.649527Z\", \"created_time\": \"2021-06-24T15:33:10.651613Z\", \"created_time_dt\": \"2021-06-24T15:33:10.651613Z\", \"duration\": \"0:00:13\", \"iteration\": \"43\", \"goal\": null, \"run_name\": \"Canceled\", \"run_properties\": null}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_44\", \"run_number\": 49, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:33:32.890474Z\", \"end_time\": \"2021-06-24T15:34:28.38095Z\", \"created_time\": \"2021-06-24T15:33:25.446043Z\", \"created_time_dt\": \"2021-06-24T15:33:25.446043Z\", \"duration\": \"0:01:02\", \"iteration\": \"44\", \"goal\": \"accuracy_max\", \"run_name\": \"VotingEnsemble\", \"run_properties\": \"\\n    estimators=[('26', Pipeline(memory=None,\\n             steps=[('maxabsscaler', MaxAbsScaler(copy=True\", \"primary_metric\": 0.87965517, \"best_metric\": 0.87965517}, {\"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898_45\", \"run_number\": 50, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-06-24T15:33:33.468885Z\", \"end_time\": \"2021-06-24T15:34:32.112705Z\", \"created_time\": \"2021-06-24T15:33:25.490295Z\", \"created_time_dt\": \"2021-06-24T15:33:25.490295Z\", \"duration\": \"0:01:06\", \"iteration\": \"45\", \"goal\": \"accuracy_max\", \"run_name\": \"StackEnsemble\", \"run_properties\": \"\\n    base_learners=[('26', Pipeline(memory=None,\\n             steps=[('maxabsscaler', MaxAbsScaler(copy=True\", \"primary_metric\": 0.86965517, \"best_metric\": 0.87965517}], \"children_metrics\": {\"categories\": [0], \"series\": {\"average_precision_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"average_precision_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8807888197525153, 0.8807340475847678, 0.8942750118151807, 0.8954114111067939, 0.9012227104204087, 0.8806553667210683, 0.8767789214749886, 0.7438412592591064, 0.8971178182388396, 0.8401142754782065, 0.8945349664625457, 0.860024556971147, 0.8880681299581179, 0.8534413132635805, 0.8846017871895763, 0.8914413855454489, 0.8848358333175101, 0.8918742359962035, 0.8840596035765251, 0.8801441796559588, 0.9018540483119624, 0.8718346611014851, 0.8913530139789293, 0.8848370447988796, 0.863623660027798, 0.5603108499972568, 0.8937157808473988, 0.834706521081684, 0.8833412239264323, 0.8549605393493687, 0.9070917858634282, 0.8942590558911627, 0.895720257547359, 0.8939127939181132, 0.8840187962511242, 0.8942646552523325, 0.8872594542438383, 0.8916498589940277, 0.8787037398572138, 0.8867788668129621, 0.8689215911243545, 0.8745008216808513, 0.9047652135631198, 0.9014365220159235]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"average_precision_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8807888197525153, 0.8807888197525153, 0.8942750118151807, 0.8954114111067939, 0.9012227104204087, 0.9012227104204087, 0.9012227104204087, 0.9012227104204087, 0.9012227104204087, 0.9012227104204087, 0.9012227104204087, 0.9012227104204087, 0.9012227104204087, 0.9012227104204087, 0.9012227104204087, 0.9012227104204087, 0.9012227104204087, 0.9012227104204087, 0.9012227104204087, 0.9012227104204087, 0.9018540483119624, 0.9018540483119624, 0.9018540483119624, 0.9018540483119624, 0.9018540483119624, 0.9018540483119624, 0.9018540483119624, 0.9018540483119624, 0.9018540483119624, 0.9018540483119624, 0.9070917858634282, 0.9070917858634282, 0.9070917858634282, 0.9070917858634282, 0.9070917858634282, 0.9070917858634282, 0.9070917858634282, 0.9070917858634282, 0.9070917858634282, 0.9070917858634282, 0.9070917858634282, 0.9070917858634282, 0.9070917858634282, 0.9070917858634282]}], \"norm_macro_recall\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"norm_macro_recall\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.6154165791620023, 0.626049804187676, 0.604665434171727, 0.6109971973741996, 0.6549493447056375, 0.6333811628874558, 0.5710569110523344, 0.3073880419097811, 0.6200837147215866, 0.5173603664959501, 0.5771091381285889, 0.5239716468377796, 0.5941057832327854, 0.29845021810124783, 0.5207736402930911, 0.5201972239558051, 0.5937715575169807, 0.598403933912515, 0.628821468196182, 0.6212777984156702, 0.5899849946011273, 0.5262171279648397, 0.6521401816464746, 0.5944002199173823, 0.3263522194815101, 0.00803571428571428, 0.6444712233482256, 0.37979216403987565, 0.5916896481982293, 0.47334617010246305, 0.6563932385311102, 0.6514908309971238, 0.6539366746906794, 0.642922814282082, 0.5986249657410984, 0.6167287363666082, 0.6043058040357813, 0.6462741909120627, 0.5962915069293787, 0.6361632696695626, 0.6265983800079911, 0.5639810907373837, 0.6951883950653974, 0.6787823800278033]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"norm_macro_recall_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.6154165791620023, 0.626049804187676, 0.626049804187676, 0.626049804187676, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6549493447056375, 0.6563932385311102, 0.6563932385311102, 0.6563932385311102, 0.6563932385311102, 0.6563932385311102, 0.6563932385311102, 0.6563932385311102, 0.6563932385311102, 0.6563932385311102, 0.6563932385311102, 0.6563932385311102, 0.6563932385311102, 0.6951883950653974, 0.6951883950653974]}], \"AUC_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"AUC_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8840955354735103, 0.8847369443591411, 0.8980844271416354, 0.900571990307345, 0.9055277005370256, 0.8858112647120654, 0.8857247090057158, 0.7469446399265621, 0.9049805525561817, 0.8608370342027666, 0.9025306153504093, 0.8666361023606447, 0.9026780390810141, 0.8630312751575909, 0.8956902993787719, 0.8947674802399058, 0.9018329863553263, 0.9022516357593588, 0.8959944243568957, 0.8905101635291567, 0.9046088182412554, 0.8767071191098079, 0.8996696901729508, 0.8955813779618127, 0.8677668036197212, 0.5536330407568109, 0.9035409227394353, 0.8523181402672249, 0.8951857931224636, 0.8638231503495234, 0.9127132200285517, 0.9041655316100968, 0.9050071242280053, 0.9036645746722979, 0.8990051504199673, 0.898721363740929, 0.8997655436351089, 0.89957633697771, 0.8803733566183795, 0.8993892261946037, 0.870601491101491, 0.8804324963979999, 0.9155249459837561, 0.9124390173391319]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"AUC_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8840955354735103, 0.8847369443591411, 0.8980844271416354, 0.900571990307345, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9155249459837561, 0.9155249459837561]}], \"precision_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"precision_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8443308716969533, 0.8506678986628277, 0.8445683927492288, 0.8529602134774548, 0.8538112230155841, 0.8614486145156839, 0.85318347869986, 0.706401268871059, 0.854846466305087, 0.8214794960088856, 0.8494995299094643, 0.8411052904764549, 0.8431133004926108, 0.7841864758910736, 0.840623900302411, 0.8458189288953408, 0.8481937387708515, 0.8553606304186647, 0.8517320507989611, 0.8632553265105122, 0.8483553117020135, 0.8502544768741169, 0.8633423099056532, 0.8505732852344436, 0.7965013089507342, 0.5416583621161506, 0.869143788565579, 0.7915787865391313, 0.8512215457548056, 0.8203742885883065, 0.8667725745908786, 0.8616377708589763, 0.8493163008657831, 0.8508646970075848, 0.853522805839049, 0.8474630628384267, 0.8323001166241799, 0.8599860335179809, 0.862252871880558, 0.8524845056728492, 0.8616764117437399, 0.8531360607486439, 0.8939134261540558, 0.8862361302094964]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"precision_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8443308716969533, 0.8506678986628277, 0.8506678986628277, 0.8529602134774548, 0.8538112230155841, 0.8614486145156839, 0.8614486145156839, 0.8614486145156839, 0.8614486145156839, 0.8614486145156839, 0.8614486145156839, 0.8614486145156839, 0.8614486145156839, 0.8614486145156839, 0.8614486145156839, 0.8614486145156839, 0.8614486145156839, 0.8614486145156839, 0.8614486145156839, 0.8632553265105122, 0.8632553265105122, 0.8632553265105122, 0.8633423099056532, 0.8633423099056532, 0.8633423099056532, 0.8633423099056532, 0.869143788565579, 0.869143788565579, 0.869143788565579, 0.869143788565579, 0.869143788565579, 0.869143788565579, 0.869143788565579, 0.869143788565579, 0.869143788565579, 0.869143788565579, 0.869143788565579, 0.869143788565579, 0.869143788565579, 0.869143788565579, 0.869143788565579, 0.869143788565579, 0.8939134261540558, 0.8939134261540558]}], \"recall_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"recall_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8359770114942527, 0.8358620689655172, 0.8327586206896551, 0.8459770114942529, 0.8427586206896551, 0.8496551724137931, 0.8360919540229885, 0.7293103448275863, 0.8390804597701148, 0.8093103448275862, 0.8325287356321839, 0.8262068965517241, 0.8360919540229885, 0.7559770114942529, 0.8195402298850574, 0.8260919540229885, 0.8393103448275863, 0.8393103448275863, 0.8358620689655172, 0.8495402298850575, 0.8360919540229885, 0.8331034482758621, 0.8491954022988505, 0.8393103448275863, 0.7725287356321839, 0.682528735632184, 0.8560919540229885, 0.7757471264367817, 0.8393103448275863, 0.8062068965517242, 0.8560919540229884, 0.8493103448275863, 0.8190804597701149, 0.815632183908046, 0.8426436781609195, 0.8358620689655172, 0.805632183908046, 0.8493103448275863, 0.8495402298850575, 0.8358620689655174, 0.8427586206896553, 0.8362068965517242, 0.8796551724137931, 0.8696551724137931]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"recall_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8359770114942527, 0.8359770114942527, 0.8359770114942527, 0.8459770114942529, 0.8459770114942529, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8796551724137931, 0.8796551724137931]}], \"recall_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"recall_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8359770114942527, 0.8358620689655172, 0.8327586206896551, 0.8459770114942529, 0.8427586206896551, 0.8496551724137931, 0.8360919540229885, 0.7293103448275863, 0.8390804597701148, 0.8093103448275862, 0.8325287356321839, 0.8262068965517241, 0.8360919540229885, 0.7559770114942529, 0.8195402298850574, 0.8260919540229885, 0.8393103448275863, 0.8393103448275863, 0.8358620689655172, 0.8495402298850575, 0.8360919540229885, 0.8331034482758621, 0.8491954022988505, 0.8393103448275863, 0.7725287356321839, 0.682528735632184, 0.8560919540229885, 0.7757471264367817, 0.8393103448275863, 0.8062068965517242, 0.8560919540229884, 0.8493103448275863, 0.8190804597701149, 0.815632183908046, 0.8426436781609195, 0.8358620689655172, 0.805632183908046, 0.8493103448275863, 0.8495402298850575, 0.8358620689655174, 0.8427586206896553, 0.8362068965517242, 0.8796551724137931, 0.8696551724137931]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"recall_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8359770114942527, 0.8359770114942527, 0.8359770114942527, 0.8459770114942529, 0.8459770114942529, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8796551724137931, 0.8796551724137931]}], \"average_precision_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"average_precision_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9061112830231934, 0.907154018724502, 0.9138506368350336, 0.9204661553448098, 0.9219796970418305, 0.9036979509344812, 0.9018647664033231, 0.7893681357319238, 0.9219749843458189, 0.8764764478120824, 0.9196896625977816, 0.8864107422880609, 0.9185045826636555, 0.8829812883464841, 0.9080352585855126, 0.9177586180946771, 0.9137551260841807, 0.9185264340158863, 0.911998449432061, 0.9060660336140408, 0.9235926777366263, 0.894761696592598, 0.9165128119151534, 0.9145039700880538, 0.8968113838868744, 0.6356147845655569, 0.9188832372413851, 0.8773409037627611, 0.9128433838735328, 0.8846882205480238, 0.9281068788199887, 0.9197606877992346, 0.9214522093784392, 0.9206365409740623, 0.9128585781760818, 0.9175418463143667, 0.9145497164432758, 0.9167474228358916, 0.9011717142240488, 0.9163488179481138, 0.8934783354097515, 0.898857574409942, 0.9274411298401601, 0.9252589670729842]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"average_precision_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9061112830231934, 0.907154018724502, 0.9138506368350336, 0.9204661553448098, 0.9219796970418305, 0.9219796970418305, 0.9219796970418305, 0.9219796970418305, 0.9219796970418305, 0.9219796970418305, 0.9219796970418305, 0.9219796970418305, 0.9219796970418305, 0.9219796970418305, 0.9219796970418305, 0.9219796970418305, 0.9219796970418305, 0.9219796970418305, 0.9219796970418305, 0.9219796970418305, 0.9235926777366263, 0.9235926777366263, 0.9235926777366263, 0.9235926777366263, 0.9235926777366263, 0.9235926777366263, 0.9235926777366263, 0.9235926777366263, 0.9235926777366263, 0.9235926777366263, 0.9281068788199887, 0.9281068788199887, 0.9281068788199887, 0.9281068788199887, 0.9281068788199887, 0.9281068788199887, 0.9281068788199887, 0.9281068788199887, 0.9281068788199887, 0.9281068788199887, 0.9281068788199887, 0.9281068788199887, 0.9281068788199887, 0.9281068788199887]}], \"balanced_accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"balanced_accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8077082895810014, 0.8130249020938379, 0.8023327170858636, 0.8054985986870997, 0.8274746723528189, 0.816690581443728, 0.7855284555261673, 0.6477131597108713, 0.8100418573607934, 0.758680183247975, 0.7885545690642944, 0.7619858234188899, 0.7970528916163928, 0.6492251090506239, 0.7603868201465456, 0.7600986119779026, 0.7968857787584904, 0.7992019669562576, 0.814410734098091, 0.810638899207835, 0.7949924973005638, 0.7631085639824198, 0.8260700908232372, 0.7972001099586911, 0.663176109740755, 0.5040178571428571, 0.8222356116741129, 0.6898960820199378, 0.7958448240991147, 0.7366730850512315, 0.8281966192655551, 0.825745415498562, 0.8269683373453397, 0.8214614071410411, 0.7993124828705492, 0.8083643681833041, 0.8021529020178905, 0.8231370954560313, 0.7981457534646894, 0.8180816348347811, 0.8132991900039954, 0.7819905453686918, 0.8475941975326986, 0.8393911900139017]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"balanced_accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8077082895810014, 0.8130249020938379, 0.8130249020938379, 0.8130249020938379, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8475941975326986, 0.8475941975326986]}], \"f1_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"f1_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8043314151248963, 0.8078501228997539, 0.8001241942683919, 0.8098958395500663, 0.8162407256816614, 0.818994937854683, 0.7921524935930171, 0.6268892415521974, 0.8069000719504216, 0.7603669925285953, 0.7901699674133443, 0.778904802926542, 0.7975894564937193, 0.632950422884477, 0.7695296688112171, 0.7754192497122441, 0.8013719705120359, 0.800592919675218, 0.8075759840302188, 0.8139218100656445, 0.7957914602261187, 0.7830451555584783, 0.8203272835927283, 0.7977758039697399, 0.6641564063001983, 0.4154873017729764, 0.8242649543967886, 0.6942620036771706, 0.8012883076904815, 0.7507400270191169, 0.8265409230732148, 0.8195642020869908, 0.7971051326073064, 0.7933330291826073, 0.8037759609597854, 0.8044077835461312, 0.7795406372223006, 0.8195393873504436, 0.8119324843094866, 0.8063625291984506, 0.8128712473324982, 0.7948956694270393, 0.8544847640857043, 0.8417037752763805]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"f1_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8043314151248963, 0.8078501228997539, 0.8078501228997539, 0.8098958395500663, 0.8162407256816614, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.818994937854683, 0.8203272835927283, 0.8203272835927283, 0.8203272835927283, 0.8203272835927283, 0.8242649543967886, 0.8242649543967886, 0.8242649543967886, 0.8242649543967886, 0.8265409230732148, 0.8265409230732148, 0.8265409230732148, 0.8265409230732148, 0.8265409230732148, 0.8265409230732148, 0.8265409230732148, 0.8265409230732148, 0.8265409230732148, 0.8265409230732148, 0.8265409230732148, 0.8265409230732148, 0.8544847640857043, 0.8544847640857043]}], \"accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8359770114942527, 0.8358620689655172, 0.8327586206896551, 0.8459770114942529, 0.8427586206896551, 0.8496551724137931, 0.8360919540229885, 0.7293103448275863, 0.8390804597701148, 0.8093103448275862, 0.8325287356321839, 0.8262068965517241, 0.8360919540229885, 0.7559770114942529, 0.8195402298850574, 0.8260919540229885, 0.8393103448275863, 0.8393103448275863, 0.8358620689655172, 0.8495402298850575, 0.8360919540229885, 0.8331034482758621, 0.8491954022988505, 0.8393103448275863, 0.7725287356321839, 0.682528735632184, 0.8560919540229885, 0.7757471264367817, 0.8393103448275863, 0.8062068965517242, 0.8560919540229884, 0.8493103448275863, 0.8190804597701149, 0.815632183908046, 0.8426436781609195, 0.8358620689655172, 0.805632183908046, 0.8493103448275863, 0.8495402298850575, 0.8358620689655174, 0.8427586206896553, 0.8362068965517242, 0.8796551724137931, 0.8696551724137931]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8359770114942527, 0.8359770114942527, 0.8359770114942527, 0.8459770114942529, 0.8459770114942529, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8796551724137931, 0.8796551724137931]}], \"precision_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"precision_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8167365852764965, 0.8232986049897815, 0.8184907546275833, 0.8303259240759241, 0.816787150757739, 0.8427462696439679, 0.837668639395184, 0.6749044035674471, 0.8261029942279942, 0.7853385886633968, 0.8256218986962693, 0.8392317690361167, 0.8161291903176913, 0.7534096704700154, 0.8349356593487027, 0.8466691396365309, 0.8291632837033296, 0.8366777806592385, 0.8220112819756782, 0.8451538107313784, 0.8257813303845912, 0.8594646935190413, 0.8346095740008785, 0.8181842815113274, 0.7960542012266151, 0.4156362889983579, 0.8535027621755311, 0.7798344672568811, 0.8347272430087076, 0.8182457877108906, 0.8443194300726271, 0.8315507207342246, 0.7915690123430063, 0.7946189352760727, 0.8357499232270399, 0.817111090876638, 0.777231420969811, 0.8314577097309297, 0.8579791678361472, 0.8146732464395509, 0.8424548515938677, 0.8473752436647173, 0.8915326605761388, 0.8766632970609953]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"precision_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8167365852764965, 0.8232986049897815, 0.8232986049897815, 0.8303259240759241, 0.8303259240759241, 0.8427462696439679, 0.8427462696439679, 0.8427462696439679, 0.8427462696439679, 0.8427462696439679, 0.8427462696439679, 0.8427462696439679, 0.8427462696439679, 0.8427462696439679, 0.8427462696439679, 0.8466691396365309, 0.8466691396365309, 0.8466691396365309, 0.8466691396365309, 0.8466691396365309, 0.8466691396365309, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8594646935190413, 0.8915326605761388, 0.8915326605761388]}], \"AUC_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"AUC_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8840955354735103, 0.8847369443591411, 0.8980844271416355, 0.900571990307345, 0.9055277005370256, 0.8858112647120656, 0.8857247090057158, 0.7469446399265621, 0.9049805525561819, 0.8608370342027666, 0.9025306153504093, 0.8666361023606448, 0.9026780390810138, 0.863031275157591, 0.8956902993787719, 0.8947674802399058, 0.9018329863553263, 0.9022516357593588, 0.8959944243568957, 0.8905101635291566, 0.9046088182412554, 0.8767071191098079, 0.8996696901729508, 0.8955813779618129, 0.8677668036197212, 0.5536330407568109, 0.9035409227394352, 0.8523181402672249, 0.8951857931224636, 0.8638231503495233, 0.9127132200285517, 0.9041655316100968, 0.9050071242280051, 0.9036645746722979, 0.8990051504199673, 0.8987213637409288, 0.8997655436351089, 0.89957633697771, 0.8803733566183795, 0.8993892261946037, 0.870601491101491, 0.8804324963979999, 0.9155249459837561, 0.9124390173391319]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"AUC_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8840955354735103, 0.8847369443591411, 0.8980844271416355, 0.900571990307345, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9055277005370256, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9127132200285517, 0.9155249459837561, 0.9155249459837561]}], \"average_precision_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"average_precision_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9020054536251629, 0.9033793522124445, 0.9085469254036674, 0.915198005051544, 0.9134036251430231, 0.8987639614434164, 0.896863155886184, 0.7803800881284685, 0.9203051335701498, 0.876380860099481, 0.9153552510550519, 0.8772704558840487, 0.9161637069497164, 0.857012473749144, 0.9019715624413595, 0.9045880262347422, 0.9039886042715656, 0.9100085270296232, 0.9101375761159144, 0.9015291478498986, 0.9163192081914083, 0.8819667353190452, 0.9148368359145682, 0.9156914643567193, 0.8783246168551602, 0.6801007852414547, 0.9184677830758785, 0.8715786820343983, 0.907380079578538, 0.8775519776114766, 0.9237333140020514, 0.9167154185667681, 0.9025618516649354, 0.9015992658182647, 0.9035880870479078, 0.9145450865478122, 0.9000342506999257, 0.9099658450559716, 0.8983164607256338, 0.91345274434182, 0.8886482418103718, 0.8940965713087866, 0.9237693523899221, 0.9187095746359901]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"average_precision_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9020054536251629, 0.9033793522124445, 0.9085469254036674, 0.915198005051544, 0.915198005051544, 0.915198005051544, 0.915198005051544, 0.915198005051544, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9203051335701498, 0.9237333140020514, 0.9237333140020514, 0.9237333140020514, 0.9237333140020514, 0.9237333140020514, 0.9237333140020514, 0.9237333140020514, 0.9237333140020514, 0.9237333140020514, 0.9237333140020514, 0.9237333140020514, 0.9237333140020514, 0.9237693523899221, 0.9237693523899221]}], \"f1_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"f1_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8333388901455894, 0.8342588560383983, 0.8291298962668586, 0.8424738892117525, 0.8431331489326812, 0.8456340036102313, 0.8281018445157052, 0.6906695987819544, 0.8374121291492476, 0.8048217845216165, 0.8263420407700537, 0.8160277402923579, 0.8324623064491833, 0.712005275382643, 0.8080979228611413, 0.8132634517824846, 0.8333492629079495, 0.8323341032522762, 0.8346827333509678, 0.8444890292067422, 0.8295472859032523, 0.8210007234363339, 0.8472656332418443, 0.8363603598728471, 0.7376265450314443, 0.5655542481897954, 0.8507343676426364, 0.7550407397324856, 0.832414726095011, 0.7950007570684212, 0.8526231426426243, 0.8473059349153711, 0.8251598397393176, 0.8208185647213165, 0.8357966460907578, 0.8341080989637402, 0.810866001815761, 0.8474934124198802, 0.8433055351096265, 0.8353632159779346, 0.8389370473990526, 0.8289050616466568, 0.8745402351846987, 0.864186878357725]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"f1_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8333388901455894, 0.8342588560383983, 0.8342588560383983, 0.8424738892117525, 0.8431331489326812, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8456340036102313, 0.8472656332418443, 0.8472656332418443, 0.8472656332418443, 0.8472656332418443, 0.8507343676426364, 0.8507343676426364, 0.8507343676426364, 0.8507343676426364, 0.8526231426426243, 0.8526231426426243, 0.8526231426426243, 0.8526231426426243, 0.8526231426426243, 0.8526231426426243, 0.8526231426426243, 0.8526231426426243, 0.8526231426426243, 0.8526231426426243, 0.8526231426426243, 0.8526231426426243, 0.8745402351846987, 0.8745402351846987]}], \"weighted_accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"weighted_accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8541321922200625, 0.8502962163535492, 0.8522103248408154, 0.8711314492416651, 0.8525861119001815, 0.8706144412733041, 0.8668024152086229, 0.7853667672876187, 0.8573664667389913, 0.8385082313085942, 0.8601908221055835, 0.8663450820371287, 0.8604660831924426, 0.8219603315724845, 0.8569762141082642, 0.8683139582924287, 0.8668725157824797, 0.8669339017794584, 0.8501693148445485, 0.8734514076072569, 0.8619009106067397, 0.87580944966903, 0.8642600072558428, 0.8638836774484625, 0.8399763781018773, 0.7958260151800646, 0.8788061579401969, 0.8276578072504888, 0.8685521836685911, 0.8477809767871316, 0.8743433624618511, 0.864173809519335, 0.8135532424941727, 0.8099017930288269, 0.8712996304658367, 0.8538358703944887, 0.8065900596896416, 0.8660978444731153, 0.8806239175589514, 0.8472090240631223, 0.8620508908743801, 0.8696284451768752, 0.8997600271088567, 0.8888746194162664]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"weighted_accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8541321922200625, 0.8541321922200625, 0.8541321922200625, 0.8711314492416651, 0.8711314492416651, 0.8711314492416651, 0.8711314492416651, 0.8711314492416651, 0.8711314492416651, 0.8711314492416651, 0.8711314492416651, 0.8711314492416651, 0.8711314492416651, 0.8711314492416651, 0.8711314492416651, 0.8711314492416651, 0.8711314492416651, 0.8711314492416651, 0.8711314492416651, 0.8734514076072569, 0.8734514076072569, 0.87580944966903, 0.87580944966903, 0.87580944966903, 0.87580944966903, 0.87580944966903, 0.8788061579401969, 0.8788061579401969, 0.8788061579401969, 0.8788061579401969, 0.8788061579401969, 0.8788061579401969, 0.8788061579401969, 0.8788061579401969, 0.8788061579401969, 0.8788061579401969, 0.8788061579401969, 0.8788061579401969, 0.8806239175589514, 0.8806239175589514, 0.8806239175589514, 0.8806239175589514, 0.8997600271088567, 0.8997600271088567]}], \"matthews_correlation\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"matthews_correlation\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.6231314496952846, 0.6345538749068885, 0.6193503382351858, 0.6344349455335493, 0.6434019986393122, 0.6578561317240352, 0.6182290578891694, 0.33499766898625905, 0.6338468382208977, 0.5420631828594559, 0.610283417163898, 0.5951953522174571, 0.6109976990935813, 0.3833422588348133, 0.5859889020033766, 0.5985307000342799, 0.6240216256214034, 0.6320897071733595, 0.6345092733607776, 0.6526669490817252, 0.6177579430557691, 0.6123332816414019, 0.6591553519107761, 0.6136788245796136, 0.4305243882919417, 0.021637380965132888, 0.6728299776528491, 0.4519046300757797, 0.6282666583697689, 0.5439822495152108, 0.6710562837549936, 0.6560003074182693, 0.6163386726490833, 0.6145626274581955, 0.6325413481576471, 0.6242944676369199, 0.5779096542434221, 0.6535709956161374, 0.6514847017523866, 0.6312115429165371, 0.6528764751049645, 0.6234623090877112, 0.7351420424664441, 0.7120899816164752]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"matthews_correlation_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.6231314496952846, 0.6345538749068885, 0.6345538749068885, 0.6345538749068885, 0.6434019986393122, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6578561317240352, 0.6591553519107761, 0.6591553519107761, 0.6591553519107761, 0.6591553519107761, 0.6728299776528491, 0.6728299776528491, 0.6728299776528491, 0.6728299776528491, 0.6728299776528491, 0.6728299776528491, 0.6728299776528491, 0.6728299776528491, 0.6728299776528491, 0.6728299776528491, 0.6728299776528491, 0.6728299776528491, 0.6728299776528491, 0.6728299776528491, 0.6728299776528491, 0.6728299776528491, 0.7351420424664441, 0.7351420424664441]}], \"precision_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"precision_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8359770114942527, 0.8358620689655172, 0.8327586206896551, 0.8459770114942529, 0.8427586206896551, 0.8496551724137931, 0.8360919540229885, 0.7293103448275863, 0.8390804597701148, 0.8093103448275862, 0.8325287356321839, 0.8262068965517241, 0.8360919540229885, 0.7559770114942529, 0.8195402298850574, 0.8260919540229885, 0.8393103448275863, 0.8393103448275863, 0.8358620689655172, 0.8495402298850575, 0.8360919540229885, 0.8331034482758621, 0.8491954022988505, 0.8393103448275863, 0.7725287356321839, 0.682528735632184, 0.8560919540229885, 0.7757471264367817, 0.8393103448275863, 0.8062068965517242, 0.8560919540229884, 0.8493103448275863, 0.8190804597701149, 0.815632183908046, 0.8426436781609195, 0.8358620689655172, 0.805632183908046, 0.8493103448275863, 0.8495402298850575, 0.8358620689655174, 0.8427586206896553, 0.8362068965517242, 0.8796551724137931, 0.8696551724137931]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"precision_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8359770114942527, 0.8359770114942527, 0.8359770114942527, 0.8459770114942529, 0.8459770114942529, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8796551724137931, 0.8796551724137931]}], \"f1_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"f1_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8359770114942527, 0.8358620689655172, 0.8327586206896551, 0.8459770114942529, 0.8427586206896551, 0.8496551724137931, 0.8360919540229885, 0.7293103448275863, 0.8390804597701148, 0.8093103448275862, 0.8325287356321839, 0.8262068965517241, 0.8360919540229885, 0.7559770114942529, 0.8195402298850574, 0.8260919540229885, 0.8393103448275863, 0.8393103448275863, 0.8358620689655172, 0.8495402298850575, 0.8360919540229885, 0.8331034482758621, 0.8491954022988507, 0.8393103448275863, 0.7725287356321839, 0.682528735632184, 0.8560919540229885, 0.7757471264367817, 0.8393103448275863, 0.8062068965517242, 0.8560919540229885, 0.8493103448275863, 0.8190804597701149, 0.815632183908046, 0.8426436781609195, 0.8358620689655172, 0.805632183908046, 0.8493103448275863, 0.8495402298850575, 0.8358620689655174, 0.8427586206896553, 0.8362068965517242, 0.8796551724137931, 0.8696551724137931]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"f1_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8359770114942527, 0.8359770114942527, 0.8359770114942527, 0.8459770114942529, 0.8459770114942529, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8496551724137931, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8560919540229885, 0.8796551724137931, 0.8796551724137931]}], \"recall_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"recall_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8077082895810014, 0.8130249020938379, 0.8023327170858636, 0.8054985986870997, 0.8274746723528189, 0.816690581443728, 0.7855284555261673, 0.6477131597108713, 0.8100418573607934, 0.758680183247975, 0.7885545690642944, 0.7619858234188899, 0.7970528916163928, 0.6492251090506239, 0.7603868201465456, 0.7600986119779026, 0.7968857787584904, 0.7992019669562576, 0.814410734098091, 0.810638899207835, 0.7949924973005638, 0.7631085639824198, 0.8260700908232372, 0.7972001099586911, 0.663176109740755, 0.5040178571428571, 0.8222356116741129, 0.6898960820199378, 0.7958448240991147, 0.7366730850512315, 0.8281966192655551, 0.825745415498562, 0.8269683373453397, 0.8214614071410411, 0.7993124828705492, 0.8083643681833041, 0.8021529020178905, 0.8231370954560313, 0.7981457534646894, 0.8180816348347811, 0.8132991900039954, 0.7819905453686918, 0.8475941975326986, 0.8393911900139017]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"recall_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8077082895810014, 0.8130249020938379, 0.8130249020938379, 0.8130249020938379, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8274746723528189, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8281966192655551, 0.8475941975326986, 0.8475941975326986]}], \"log_loss\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"log_loss\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.4772179826627182, 0.41764279466886123, 0.37942054204332154, 0.38964735962165975, 0.3709490832326418, 0.4088307317141811, 0.40261411351166015, 0.5725859546223158, 0.36243153018807944, 0.488972342400222, 0.38231145959136503, 0.49356672418042524, 0.39190975666583594, 0.49702308732573447, 0.4937811237209755, 0.4227894568759668, 0.4286807163746337, 0.41916278548122055, 0.37612799091289373, 0.3964188793382829, 0.3817322126397189, 0.5230151187022564, 0.3821660848889019, 0.3930762721076957, 0.4775153654860594, 0.6363810813387412, 0.37040162678257493, 0.4747333530318934, 0.41860634754545883, 0.45395287232915826, 0.3633599882544976, 0.36959959296560757, 0.4554018837940986, 0.4902244755196755, 0.4344605650348279, 0.3770736442805528, 0.45395509728297173, 0.3846073875920403, 0.40556680563001724, 0.3856922979053907, 0.4213795683978264, 0.4157375162766166, 0.38478990738632757, 0.3735932741540222]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"log_loss_min\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.4772179826627182, 0.41764279466886123, 0.37942054204332154, 0.37942054204332154, 0.3709490832326418, 0.3709490832326418, 0.3709490832326418, 0.3709490832326418, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944, 0.36243153018807944]}], \"AUC_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"markers\", \"name\": \"AUC_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9035422116527941, 0.9042166732725592, 0.9095792046505483, 0.9128579733121944, 0.9125324349319592, 0.8975108997225526, 0.8950196855595192, 0.7882304135288678, 0.916366759149161, 0.8808599550799313, 0.9128853217069628, 0.880169771436121, 0.9136435460430704, 0.8477292905271503, 0.9036357510899722, 0.8975012551195668, 0.899684502576298, 0.9062068965517242, 0.9081699035539701, 0.9005986259743691, 0.9142010833663627, 0.8883432421720174, 0.9115500066058925, 0.9128384198705245, 0.8668345884529, 0.7009476813317479, 0.915881358171489, 0.864544193420531, 0.9027644338750165, 0.8728695996829172, 0.9218326066851633, 0.9143180076628352, 0.9010725326991678, 0.8998308891531247, 0.8985110318404018, 0.9114369137270446, 0.8986514731140177, 0.9084622803540757, 0.8970274805126172, 0.9099788611441404, 0.8868949663099486, 0.8925362663495839, 0.921115206764434, 0.9169729158409302]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"44\", \"45\"], \"mode\": \"lines\", \"name\": \"AUC_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9035422116527941, 0.9042166732725592, 0.9095792046505483, 0.9128579733121944, 0.9128579733121944, 0.9128579733121944, 0.9128579733121944, 0.9128579733121944, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.916366759149161, 0.9218326066851633, 0.9218326066851633, 0.9218326066851633, 0.9218326066851633, 0.9218326066851633, 0.9218326066851633, 0.9218326066851633, 0.9218326066851633, 0.9218326066851633, 0.9218326066851633, 0.9218326066851633, 0.9218326066851633, 0.9218326066851633, 0.9218326066851633]}]}, \"metricName\": null, \"primaryMetricName\": \"accuracy\", \"showLegend\": false}, \"run_metrics\": [{\"name\": \"experiment_status\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], \"series\": [{\"data\": [\"DatasetEvaluation\", \"FeaturesGeneration\", \"DatasetFeaturization\", \"DatasetFeaturizationCompleted\", \"DatasetCrossValidationSplit\", \"ModelSelection\", \"BestRunExplainModel\", \"ModelExplanationDataSetSetup\", \"PickSurrogateModel\", \"EngineeredFeatureExplanations\", \"EngineeredFeatureExplanations\", \"RawFeaturesExplanations\", \"RawFeaturesExplanations\", \"BestRunExplainModel\"]}]}, {\"name\": \"experiment_status_description\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], \"series\": [{\"data\": [\"Gathering dataset statistics.\", \"Generating features for the dataset.\", \"Beginning to fit featurizers and featurize the dataset.\", \"Completed fit featurizers and featurizing the dataset.\", \"Generating individually featurized CV splits.\", \"Beginning model selection.\", \"Best run model explanations started\", \"Model explanations data setup completed\", \"Choosing LightGBM as the surrogate model for explanations\", \"Computation of engineered features started\", \"Computation of engineered features completed\", \"Computation of raw features started\", \"Computation of raw features completed\", \"Best run model explanations completed\"]}]}, {\"name\": \"AUC_macro\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.9155249459837561]}]}, {\"name\": \"AUC_micro\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.921115206764434]}]}, {\"name\": \"f1_score_weighted\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.8745402351846987]}]}, {\"name\": \"average_precision_score_macro\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.9047652135631198]}]}, {\"name\": \"average_precision_score_weighted\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.9274411298401601]}]}, {\"name\": \"log_loss\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.38478990738632757]}]}, {\"name\": \"recall_score_weighted\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.8796551724137931]}]}, {\"name\": \"norm_macro_recall\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.6951883950653974]}]}, {\"name\": \"precision_score_weighted\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.8939134261540558]}]}, {\"name\": \"average_precision_score_micro\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.9237693523899221]}]}, {\"name\": \"weighted_accuracy\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.8997600271088567]}]}, {\"name\": \"f1_score_micro\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.8796551724137931]}]}, {\"name\": \"recall_score_macro\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.8475941975326986]}]}, {\"name\": \"matthews_correlation\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.7351420424664441]}]}, {\"name\": \"balanced_accuracy\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.8475941975326986]}]}, {\"name\": \"f1_score_macro\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.8544847640857043]}]}, {\"name\": \"precision_score_macro\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.8915326605761388]}]}, {\"name\": \"accuracy\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.8796551724137931]}]}, {\"name\": \"recall_score_micro\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.8796551724137931]}]}, {\"name\": \"precision_score_micro\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.8796551724137931]}]}, {\"name\": \"AUC_weighted\", \"run_id\": \"AutoML_f5189558-a546-4ea4-b854-4d47f3721898\", \"categories\": [0], \"series\": [{\"data\": [0.9155249459837561]}]}], \"run_logs\": \"\\nRun is completed.\", \"graph\": {}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.30.0\"}, \"loading\": false}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 17,
      "metadata": {
        "gather": {
          "logged": 1624548895325
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# waiting for the run \r\n",
        "\r\n",
        "remote_run.wait_for_completion(show_output=True)"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<IPython.core.display.HTML object>",
            "text/html": "<table style=\"width:100%\"><tr><th>Experiment</th><th>Id</th><th>Type</th><th>Status</th><th>Details Page</th><th>Docs Page</th></tr><tr><td>CapstoneProject</td><td>AutoML_f5189558-a546-4ea4-b854-4d47f3721898</td><td>automl</td><td>Completed</td><td><a href=\"https://ml.azure.com/runs/AutoML_f5189558-a546-4ea4-b854-4d47f3721898?wsid=/subscriptions/b968fb36-f06a-4c76-a15f-afab68ae7667/resourcegroups/aml-quickstarts-147903/workspaces/quick-starts-ws-147903&amp;tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td><td><a href=\"https://docs.microsoft.com/en-us/python/api/overview/azure/ml/intro?view=azure-ml-py\" target=\"_blank\" rel=\"noopener\">Link to Documentation</a></td></tr></table>"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "****************************************************************************************************\n",
            "DATA GUARDRAILS: \n",
            "\n",
            "TYPE:         Cross validation\n",
            "STATUS:       DONE\n",
            "DESCRIPTION:  Each iteration of the trained model was validated through cross-validation.\n",
            "              \n",
            "DETAILS:      \n",
            "+---------------------------------+\n",
            "|Number of folds                  |\n",
            "+=================================+\n",
            "|10                               |\n",
            "+---------------------------------+\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "TYPE:         Class balancing detection\n",
            "STATUS:       PASSED\n",
            "DESCRIPTION:  Your inputs were analyzed, and all classes are balanced in your training data.\n",
            "              Learn more about imbalanced data: https://aka.ms/AutomatedMLImbalancedData\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "TYPE:         Missing feature values imputation\n",
            "STATUS:       PASSED\n",
            "DESCRIPTION:  No feature missing values were detected in the training data.\n",
            "              Learn more about missing value imputation: https://aka.ms/AutomatedMLFeaturization\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "TYPE:         High cardinality feature detection\n",
            "STATUS:       PASSED\n",
            "DESCRIPTION:  Your inputs were analyzed, and no high cardinality features were detected.\n",
            "              Learn more about high cardinality feature handling: https://aka.ms/AutomatedMLFeaturization\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "****************************************************************************************************\n",
            "ITERATION: The iteration being evaluated.\n",
            "PIPELINE: A summary description of the pipeline being evaluated.\n",
            "DURATION: Time taken for the current iteration.\n",
            "METRIC: The result of computing score on the fitted pipeline.\n",
            "BEST: The best observed score thus far.\n",
            "****************************************************************************************************\n",
            "\n",
            " ITERATION   PIPELINE                                       DURATION      METRIC      BEST\n",
            "         0   MaxAbsScaler LightGBM                          0:00:40       0.8360    0.8360\n",
            "         1   MaxAbsScaler XGBoostClassifier                 0:01:40       0.8359    0.8360\n",
            "         2   MinMaxScaler RandomForest                      0:00:40       0.8328    0.8360\n",
            "         3   MinMaxScaler RandomForest                      0:00:38       0.8460    0.8460\n",
            "         4   MinMaxScaler RandomForest                      0:01:21       0.8428    0.8460\n",
            "         5   SparseNormalizer XGBoostClassifier             0:01:45       0.8497    0.8497\n",
            "         6   SparseNormalizer XGBoostClassifier             0:01:42       0.8361    0.8497\n",
            "         7   MinMaxScaler SVM                               0:00:39       0.7293    0.8497\n",
            "         8   MaxAbsScaler GradientBoosting                  0:00:38       0.8391    0.8497\n",
            "         9   SparseNormalizer XGBoostClassifier             0:00:38       0.8093    0.8497\n",
            "        10   StandardScalerWrapper LightGBM                 0:00:37       0.8325    0.8497\n",
            "        11   SparseNormalizer XGBoostClassifier             0:00:39       0.8262    0.8497\n",
            "        12   StandardScalerWrapper RandomForest             0:00:36       0.8361    0.8497\n",
            "        13   SparseNormalizer LightGBM                      0:00:37       0.7560    0.8497\n",
            "        14   StandardScalerWrapper XGBoostClassifier        0:00:37       0.8195    0.8497\n",
            "        15   MinMaxScaler LightGBM                          0:00:38       0.8261    0.8497\n",
            "        16   MaxAbsScaler LightGBM                          0:00:38       0.8393    0.8497\n",
            "        17   MaxAbsScaler LightGBM                          0:00:35       0.8393    0.8497\n",
            "        18   StandardScalerWrapper LightGBM                 0:00:38       0.8359    0.8497\n",
            "        19   SparseNormalizer XGBoostClassifier             0:00:38       0.8495    0.8497\n",
            "        20   StandardScalerWrapper RandomForest             0:00:38       0.8361    0.8497\n",
            "        21   SparseNormalizer XGBoostClassifier             0:00:37       0.8331    0.8497\n",
            "        22   StandardScalerWrapper LightGBM                 0:00:37       0.8492    0.8497\n",
            "        23   StandardScalerWrapper LightGBM                 0:01:47       0.8393    0.8497\n",
            "        24   StandardScalerWrapper LightGBM                 0:00:31       0.7725    0.8497\n",
            "        25   PCA XGBoostClassifier                          0:00:36       0.6825    0.8497\n",
            "        26   MaxAbsScaler LightGBM                          0:00:36       0.8561    0.8561\n",
            "        27   MaxAbsScaler LightGBM                          0:00:39       0.7757    0.8561\n",
            "        28   StandardScalerWrapper LightGBM                 0:00:36       0.8393    0.8561\n",
            "        29   SparseNormalizer RandomForest                  0:00:36       0.8062    0.8561\n",
            "        30   MaxAbsScaler LightGBM                          0:00:39       0.8561    0.8561\n",
            "        31   MaxAbsScaler LightGBM                          0:00:41       0.8493    0.8561\n",
            "        32   MaxAbsScaler RandomForest                      0:00:44       0.8191    0.8561\n",
            "        33   RobustScaler RandomForest                      0:00:42       0.8156    0.8561\n",
            "        34   MaxAbsScaler LightGBM                          0:00:39       0.8426    0.8561\n",
            "        35   StandardScalerWrapper LightGBM                 0:00:37       0.8359    0.8561\n",
            "        36   MaxAbsScaler RandomForest                      0:00:36       0.8056    0.8561\n",
            "        37   StandardScalerWrapper LightGBM                 0:00:39       0.8493    0.8561\n",
            "        38   SparseNormalizer XGBoostClassifier             0:00:34       0.8495    0.8561\n",
            "        39   StandardScalerWrapper XGBoostClassifier        0:00:39       0.8359    0.8561\n",
            "        40   SparseNormalizer LightGBM                      0:00:41       0.8428    0.8561\n",
            "        41   SparseNormalizer XGBoostClassifier             0:00:39       0.8362    0.8561\n",
            "        42                                                  0:00:07          nan    0.8561\n",
            "        43                                                  0:00:14          nan    0.8561\n",
            "        44    VotingEnsemble                                0:00:55       0.8797    0.8797\n",
            "        45    StackEnsemble                                 0:00:59       0.8697    0.8797\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 18,
          "data": {
            "text/plain": "{'runId': 'AutoML_f5189558-a546-4ea4-b854-4d47f3721898',\n 'target': 'CapstoneAML',\n 'status': 'Completed',\n 'startTimeUtc': '2021-06-24T15:20:32.124705Z',\n 'endTimeUtc': '2021-06-24T15:34:33.84051Z',\n 'properties': {'num_iterations': '1000',\n  'training_type': 'TrainFull',\n  'acquisition_function': 'EI',\n  'primary_metric': 'accuracy',\n  'train_split': '0',\n  'acquisition_parameter': '0',\n  'num_cross_validation': None,\n  'target': 'CapstoneAML',\n  'AMLSettingsJsonString': '{\"path\":null,\"name\":\"CapstoneProject\",\"subscription_id\":\"b968fb36-f06a-4c76-a15f-afab68ae7667\",\"resource_group\":\"aml-quickstarts-147903\",\"workspace_name\":\"quick-starts-ws-147903\",\"region\":\"southcentralus\",\"compute_target\":\"CapstoneAML\",\"spark_service\":null,\"azure_service\":\"remote\",\"many_models\":false,\"pipeline_fetch_max_batch_size\":1,\"enable_batch_run\":false,\"enable_run_restructure\":false,\"start_auxiliary_runs_before_parent_complete\":false,\"enable_code_generation\":false,\"iterations\":1000,\"primary_metric\":\"accuracy\",\"task_type\":\"classification\",\"data_script\":null,\"test_size\":0.0,\"validation_size\":0.0,\"n_cross_validations\":null,\"y_min\":null,\"y_max\":null,\"num_classes\":null,\"featurization\":\"auto\",\"_ignore_package_version_incompatibilities\":false,\"is_timeseries\":false,\"max_cores_per_iteration\":1,\"max_concurrent_iterations\":5,\"iteration_timeout_minutes\":null,\"mem_in_mb\":null,\"enforce_time_on_windows\":false,\"experiment_timeout_minutes\":20,\"experiment_exit_score\":null,\"whitelist_models\":null,\"blacklist_algos\":[\"TensorFlowLinearClassifier\",\"TensorFlowDNN\"],\"supported_models\":[\"DecisionTree\",\"SGD\",\"KNN\",\"AveragedPerceptronClassifier\",\"LogisticRegression\",\"ExtremeRandomTrees\",\"GradientBoosting\",\"TensorFlowLinearClassifier\",\"TensorFlowDNN\",\"BernoulliNaiveBayes\",\"LightGBM\",\"RandomForest\",\"LinearSVM\",\"XGBoostClassifier\",\"SVM\",\"MultinomialNaiveBayes\"],\"private_models\":[],\"auto_blacklist\":true,\"blacklist_samples_reached\":false,\"exclude_nan_labels\":true,\"verbosity\":20,\"_debug_log\":\"azureml_automl.log\",\"show_warnings\":false,\"model_explainability\":true,\"service_url\":null,\"sdk_url\":null,\"sdk_packages\":null,\"enable_onnx_compatible_models\":false,\"enable_split_onnx_featurizer_estimator_models\":false,\"vm_type\":\"STANDARD_DS3_V2\",\"telemetry_verbosity\":20,\"send_telemetry\":true,\"enable_dnn\":false,\"scenario\":\"SDK-1.13.0\",\"environment_label\":null,\"save_mlflow\":false,\"force_text_dnn\":false,\"enable_feature_sweeping\":true,\"enable_early_stopping\":true,\"early_stopping_n_iters\":10,\"metrics\":null,\"enable_metric_confidence\":false,\"enable_ensembling\":true,\"enable_stack_ensembling\":true,\"ensemble_iterations\":15,\"enable_tf\":false,\"enable_subsampling\":null,\"subsample_seed\":null,\"enable_nimbusml\":false,\"enable_streaming\":false,\"force_streaming\":false,\"track_child_runs\":true,\"allowed_private_models\":[],\"label_column_name\":\"DEATH_EVENT\",\"weight_column_name\":null,\"cv_split_column_names\":null,\"enable_local_managed\":false,\"_local_managed_run_id\":null,\"cost_mode\":1,\"lag_length\":0,\"metric_operation\":\"maximize\",\"preprocess\":true}',\n  'DataPrepJsonString': '{\\\\\"training_data\\\\\": {\\\\\"datasetId\\\\\": \\\\\"ad94de96-3e56-44dd-b475-d7fbe04da7d0\\\\\"}, \\\\\"datasets\\\\\": 0}',\n  'EnableSubsampling': None,\n  'runTemplate': 'AutoML',\n  'azureml.runsource': 'automl',\n  'display_task_type': 'classification',\n  'dependencies_versions': '{\"azureml-widgets\": \"1.30.0\", \"azureml-train\": \"1.30.0\", \"azureml-train-restclients-hyperdrive\": \"1.30.0\", \"azureml-train-core\": \"1.30.0\", \"azureml-train-automl\": \"1.30.0\", \"azureml-train-automl-runtime\": \"1.30.0\", \"azureml-train-automl-client\": \"1.30.0\", \"azureml-tensorboard\": \"1.30.0\", \"azureml-telemetry\": \"1.30.0\", \"azureml-sdk\": \"1.30.0\", \"azureml-samples\": \"0+unknown\", \"azureml-pipeline\": \"1.30.0\", \"azureml-pipeline-steps\": \"1.30.0\", \"azureml-pipeline-core\": \"1.30.0\", \"azureml-opendatasets\": \"1.30.0\", \"azureml-model-management-sdk\": \"1.0.1b6.post1\", \"azureml-mlflow\": \"1.30.0\", \"azureml-interpret\": \"1.30.0\", \"azureml-explain-model\": \"1.30.0\", \"azureml-defaults\": \"1.30.0\", \"azureml-dataset-runtime\": \"1.30.0\", \"azureml-dataprep\": \"2.15.1\", \"azureml-dataprep-rslex\": \"1.13.0\", \"azureml-dataprep-native\": \"33.0.0\", \"azureml-datadrift\": \"1.30.0\", \"azureml-core\": \"1.30.0\", \"azureml-contrib-services\": \"1.30.0\", \"azureml-contrib-server\": \"1.30.0\", \"azureml-contrib-reinforcementlearning\": \"1.30.0\", \"azureml-contrib-pipeline-steps\": \"1.30.0\", \"azureml-contrib-notebook\": \"1.30.0\", \"azureml-contrib-fairness\": \"1.30.0\", \"azureml-contrib-dataset\": \"1.30.0\", \"azureml-cli-common\": \"1.30.0\", \"azureml-automl-runtime\": \"1.30.0\", \"azureml-automl-dnn-nlp\": \"1.30.0\", \"azureml-automl-core\": \"1.30.0\", \"azureml-accel-models\": \"1.30.0\"}',\n  '_aml_system_scenario_identification': 'Remote.Parent',\n  'ClientType': 'SDK',\n  'environment_cpu_name': 'AzureML-AutoML',\n  'environment_cpu_label': 'prod',\n  'environment_gpu_name': 'AzureML-AutoML-GPU',\n  'environment_gpu_label': 'prod',\n  'root_attribution': 'automl',\n  'attribution': 'AutoML',\n  'Orchestrator': 'AutoML',\n  'CancelUri': 'https://southcentralus.api.azureml.ms/jasmine/v1.0/subscriptions/b968fb36-f06a-4c76-a15f-afab68ae7667/resourceGroups/aml-quickstarts-147903/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-147903/experimentids/756ebcfe-e43f-4b8d-88b6-2da4c1e7fb23/cancel/AutoML_f5189558-a546-4ea4-b854-4d47f3721898',\n  'ClientSdkVersion': '1.30.0',\n  'snapshotId': '00000000-0000-0000-0000-000000000000',\n  'SetupRunId': 'AutoML_f5189558-a546-4ea4-b854-4d47f3721898_setup',\n  'SetupRunContainerId': 'dcid.AutoML_f5189558-a546-4ea4-b854-4d47f3721898_setup',\n  'FeaturizationRunJsonPath': 'featurizer_container.json',\n  'FeaturizationRunId': 'AutoML_f5189558-a546-4ea4-b854-4d47f3721898_featurize',\n  'ProblemInfoJsonString': '{\"dataset_num_categorical\": 0, \"is_sparse\": false, \"subsampling\": false, \"has_extra_col\": true, \"dataset_classes\": 2, \"dataset_features\": 12, \"dataset_samples\": 299, \"single_frequency_class_detected\": false}',\n  'ModelExplainRunId': 'AutoML_f5189558-a546-4ea4-b854-4d47f3721898_ModelExplain',\n  'azureml.git.repository_uri': 'https://github.com/arunanshupandey/nd00333-capstone.git',\n  'mlflow.source.git.repoURL': 'https://github.com/arunanshupandey/nd00333-capstone.git',\n  'azureml.git.branch': 'master',\n  'mlflow.source.git.branch': 'master',\n  'azureml.git.commit': '7c2e6426cefa3e366d2b4981ee65acd26ee0344f',\n  'mlflow.source.git.commit': '7c2e6426cefa3e366d2b4981ee65acd26ee0344f',\n  'azureml.git.dirty': 'False'},\n 'inputDatasets': [{'dataset': {'id': 'ad94de96-3e56-44dd-b475-d7fbe04da7d0'}, 'consumptionDetails': {'type': 'RunInput', 'inputName': 'training_data', 'mechanism': 'Direct'}}],\n 'outputDatasets': [],\n 'logFiles': {},\n 'submittedBy': 'ODL_User 147903'}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 18,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1624549110753
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Best Model\n",
        "\n",
        "TODO: In the cell below, get the best model from the automl experiments and display all the properties of the model.\n",
        "\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Best model\r\n",
        "\r\n",
        "# Retrieve best model from remote Run\r\n",
        "#best_model_output = remote_run.get_pipeline_output(best_model_output_name)\r\n",
        "best_run, model = remote_run.get_output()\r\n"
      ],
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'Run' object has no attribute 'download'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-25-dddfc2ae66c9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#best_model_output = remote_run.get_pipeline_output(best_model_output_name)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mbest_run\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mremote_run\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mnum_file_downloaded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbest_run\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdownload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'.'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshow_progress\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m: 'Run' object has no attribute 'download'"
          ]
        }
      ],
      "execution_count": 25,
      "metadata": {
        "gather": {
          "logged": 1598431425670
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 27,
          "data": {
            "text/plain": "Pipeline(memory=None,\n         steps=[('datatransformer',\n                 DataTransformer(enable_dnn=False, enable_feature_sweeping=True, feature_sweeping_config={}, feature_sweeping_timeout=86400, featurization_config=None, force_text_dnn=False, is_cross_validation=True, is_onnx_compatible=False, observer=None, task='classification', working_dir='/mnt/batch/tasks/shared/LS_root/mount...\n    timeseries_param_dict=None,\n    gpu_training_param_dict={'processing_unit_type': 'cpu'}\n), random_state=None, reg_alpha=0, reg_lambda=0.8421052631578947, subsample=1))], verbose=False))], flatten_transform=None, weights=[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]))],\n         verbose=False)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 27,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1624549476942
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.steps"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 30,
          "data": {
            "text/plain": "[('datatransformer',\n  DataTransformer(\n      task='classification',\n      is_onnx_compatible=False,\n      enable_feature_sweeping=True,\n      enable_dnn=False,\n      force_text_dnn=False,\n      feature_sweeping_timeout=86400,\n      featurization_config=None,\n      is_cross_validation=True,\n      feature_sweeping_config={}\n  )),\n ('prefittedsoftvotingclassifier',\n  PreFittedSoftVotingClassifier(\n      estimators=[('26', Pipeline(memory=None,\n               steps=[('maxabsscaler', MaxAbsScaler(copy=True)),\n                      ('lightgbmclassifier',\n                       LightGBMClassifier(boosting_type='gbdt', colsample_bytree=0.6933333333333332, learning_rate=0.08947473684210526, max_bin=170, max_depth=5, min_child_weight=7, min_data_in_leaf=0.044833103448275874, min_split_gain=0.15789473684210525, n_estimators=25, n_jobs=1, num_leav...\n          iteration_timeout_param=None,\n          feature_column_names=None,\n          label_column_name=None,\n          weight_column_name=None,\n          cv_split_column_names=None,\n          enable_streaming=None,\n          timeseries_param_dict=None,\n          gpu_training_param_dict={'processing_unit_type': 'cpu'}\n      ), random_state=None, reg_alpha=0.05263157894736842, reg_lambda=0.15789473684210525, subsample=0.6931578947368422))],\n               verbose=False)), ('30', Pipeline(memory=None,\n               steps=[('maxabsscaler', MaxAbsScaler(copy=True)),\n                      ('lightgbmclassifier',\n                       LightGBMClassifier(boosting_type='gbdt', colsample_bytree=0.4955555555555555, learning_rate=0.021060526315789474, max_bin=50, max_depth=2, min_child_weight=6, min_data_in_leaf=0.09310413793103449, min_split_gain=0.5789473684210527, n_estimators=200, n_jobs=1, num_leave...\n          iteration_timeout_param=None,\n          feature_column_names=None,\n          label_column_name=None,\n          weight_column_name=None,\n          cv_split_column_names=None,\n          enable_streaming=None,\n          timeseries_param_dict=None,\n          gpu_training_param_dict={'processing_unit_type': 'cpu'}\n      ), random_state=None, reg_alpha=0.8421052631578947, reg_lambda=0.631578947368421, subsample=0.8910526315789474))],\n               verbose=False)), ('5', Pipeline(memory=None,\n               steps=[('sparsenormalizer', Normalizer(copy=True, norm='l1')),\n                      ('xgboostclassifier',\n                       XGBoostClassifier(booster='gbtree', colsample_bytree=0.9, eta=0.3, gamma=0, max_depth=6, max_leaves=0, n_estimators=25, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(\n          dataset_samples=299,\n          dataset_features=12,\n          dataset_classes=2,\n          dataset_num_catego...\n          iteration_timeout_param=None,\n          feature_column_names=None,\n          label_column_name=None,\n          weight_column_name=None,\n          cv_split_column_names=None,\n          enable_streaming=None,\n          timeseries_param_dict=None,\n          gpu_training_param_dict={'processing_unit_type': 'cpu'}\n      ), random_state=0, reg_alpha=1.0416666666666667, reg_lambda=0.5208333333333334, subsample=0.7, tree_method='auto'))],\n               verbose=False)), ('38', Pipeline(memory=None,\n               steps=[('sparsenormalizer', Normalizer(copy=True, norm='max')),\n                      ('xgboostclassifier',\n                       XGBoostClassifier(booster='gbtree', colsample_bytree=0.7, eta=0.1, gamma=5, max_depth=10, max_leaves=255, n_estimators=100, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(\n          dataset_samples=299,\n          dataset_features=12,\n          dataset_classes=2,\n          dataset_num_c...\n          iteration_timeout_mode=0,\n          iteration_timeout_param=None,\n          feature_column_names=None,\n          label_column_name=None,\n          weight_column_name=None,\n          cv_split_column_names=None,\n          enable_streaming=None,\n          timeseries_param_dict=None,\n          gpu_training_param_dict={'processing_unit_type': 'cpu'}\n      ), random_state=0, reg_alpha=0.3125, reg_lambda=2.0833333333333335, subsample=0.6, tree_method='auto'))],\n               verbose=False)), ('19', Pipeline(memory=None,\n               steps=[('sparsenormalizer', Normalizer(copy=True, norm='max')),\n                      ('xgboostclassifier',\n                       XGBoostClassifier(booster='gbtree', colsample_bytree=0.9, eta=0.3, gamma=0, max_depth=10, max_leaves=15, n_estimators=25, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(\n          dataset_samples=299,\n          dataset_features=12,\n          dataset_classes=2,\n          dataset_num_cat...\n          iteration_timeout_mode=0,\n          iteration_timeout_param=None,\n          feature_column_names=None,\n          label_column_name=None,\n          weight_column_name=None,\n          cv_split_column_names=None,\n          enable_streaming=None,\n          timeseries_param_dict=None,\n          gpu_training_param_dict={'processing_unit_type': 'cpu'}\n      ), random_state=0, reg_alpha=0, reg_lambda=0.5208333333333334, subsample=0.6, tree_method='auto'))],\n               verbose=False)), ('9', Pipeline(memory=None,\n               steps=[('sparsenormalizer', Normalizer(copy=True, norm='l1')),\n                      ('xgboostclassifier',\n                       XGBoostClassifier(booster='gbtree', colsample_bytree=0.7, eta=0.2, gamma=0, max_depth=7, max_leaves=31, n_estimators=10, n_jobs=1, objective='reg:logistic', problem_info=ProblemInfo(\n          dataset_samples=299,\n          dataset_features=12,\n          dataset_classes=2,\n          dataset_num_categ...\n          iteration_timeout_mode=0,\n          iteration_timeout_param=None,\n          feature_column_names=None,\n          label_column_name=None,\n          weight_column_name=None,\n          cv_split_column_names=None,\n          enable_streaming=None,\n          timeseries_param_dict=None,\n          gpu_training_param_dict={'processing_unit_type': 'cpu'}\n      ), random_state=0, reg_alpha=0, reg_lambda=0.625, subsample=1, tree_method='auto'))],\n               verbose=False)), ('31', Pipeline(memory=None,\n               steps=[('maxabsscaler', MaxAbsScaler(copy=True)),\n                      ('lightgbmclassifier',\n                       LightGBMClassifier(boosting_type='goss', colsample_bytree=0.6933333333333332, learning_rate=0.0842121052631579, max_bin=280, max_depth=10, min_child_weight=6, min_data_in_leaf=0.03793724137931035, min_split_gain=0.5263157894736842, n_estimators=50, n_jobs=1, num_leaves...\n          cost_mode_param=None,\n          iteration_timeout_mode=0,\n          iteration_timeout_param=None,\n          feature_column_names=None,\n          label_column_name=None,\n          weight_column_name=None,\n          cv_split_column_names=None,\n          enable_streaming=None,\n          timeseries_param_dict=None,\n          gpu_training_param_dict={'processing_unit_type': 'cpu'}\n      ), random_state=None, reg_alpha=0, reg_lambda=0.8421052631578947, subsample=1))],\n               verbose=False))],\n      weights=[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285],\n      flatten_transform=None,\n      classification_labels=array([1, 0])\n  ))]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 30,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1624549541437
        }
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#TODO: Save the best model\r\n",
        "model = best_run.register_model(model_name='best_aml_run', model_path='outputs/model.joblib')"
      ],
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModelPathNotFoundException",
          "evalue": "ModelPathNotFoundException:\n\tMessage: Could not locate the provided model_path outputs/model.joblib in the set of files uploaded to the run: ['accuracy_table', 'automl_driver.py', 'azureml-logs/55_azureml-execution-tvmps_18b637fb64785e7eaac5a3e862b2a17da2c7ee2a2cfa2275859ab3502a0e1687_d.txt', 'azureml-logs/65_job_prep-tvmps_18b637fb64785e7eaac5a3e862b2a17da2c7ee2a2cfa2275859ab3502a0e1687_d.txt', 'azureml-logs/70_driver_log.txt', 'azureml-logs/75_job_post-tvmps_18b637fb64785e7eaac5a3e862b2a17da2c7ee2a2cfa2275859ab3502a0e1687_d.txt', 'azureml-logs/process_info.json', 'azureml-logs/process_status.json', 'confusion_matrix', 'explanation/7651bcee/classes.interpret.json', 'explanation/7651bcee/eval_data_viz.interpret.json', 'explanation/7651bcee/expected_values.interpret.json', 'explanation/7651bcee/features.interpret.json', 'explanation/7651bcee/global_names/0.interpret.json', 'explanation/7651bcee/global_rank/0.interpret.json', 'explanation/7651bcee/global_values/0.interpret.json', 'explanation/7651bcee/local_importance_values.interpret.json', 'explanation/7651bcee/per_class_names/0.interpret.json', 'explanation/7651bcee/per_class_rank/0.interpret.json', 'explanation/7651bcee/per_class_values/0.interpret.json', 'explanation/7651bcee/rich_metadata.interpret.json', 'explanation/7651bcee/true_ys_viz.interpret.json', 'explanation/7651bcee/visualization_dict.interpret.json', 'explanation/e7f22c13/classes.interpret.json', 'explanation/e7f22c13/eval_data_viz.interpret.json', 'explanation/e7f22c13/expected_values.interpret.json', 'explanation/e7f22c13/features.interpret.json', 'explanation/e7f22c13/global_names/0.interpret.json', 'explanation/e7f22c13/global_rank/0.interpret.json', 'explanation/e7f22c13/global_values/0.interpret.json', 'explanation/e7f22c13/local_importance_values.interpret.json', 'explanation/e7f22c13/per_class_names/0.interpret.json', 'explanation/e7f22c13/per_class_rank/0.interpret.json', 'explanation/e7f22c13/per_class_values/0.interpret.json', 'explanation/e7f22c13/rich_metadata.interpret.json', 'explanation/e7f22c13/true_ys_viz.interpret.json', 'explanation/e7f22c13/visualization_dict.interpret.json', 'explanation/e7f22c13/ys_pred_proba_viz.interpret.json', 'explanation/e7f22c13/ys_pred_viz.interpret.json', 'logs/azureml/108_azureml.log', 'logs/azureml/azureml_automl.log', 'logs/azureml/job_prep_azureml.log', 'logs/azureml/job_release_azureml.log', 'outputs/conda_env_v_1_0_0.yml', 'outputs/env_dependencies.json', 'outputs/internal_cross_validated_models.pkl', 'outputs/model.pkl', 'outputs/pipeline_graph.json', 'outputs/scoring_file_v_1_0_0.py', 'outputs/scoring_file_v_2_0_0.py']\n                See https://aka.ms/run-logging for more details.\n\tInnerException None\n\tErrorResponse \n{\n    \"error\": {\n        \"message\": \"Could not locate the provided model_path outputs/model.joblib in the set of files uploaded to the run: ['accuracy_table', 'automl_driver.py', 'azureml-logs/55_azureml-execution-tvmps_18b637fb64785e7eaac5a3e862b2a17da2c7ee2a2cfa2275859ab3502a0e1687_d.txt', 'azureml-logs/65_job_prep-tvmps_18b637fb64785e7eaac5a3e862b2a17da2c7ee2a2cfa2275859ab3502a0e1687_d.txt', 'azureml-logs/70_driver_log.txt', 'azureml-logs/75_job_post-tvmps_18b637fb64785e7eaac5a3e862b2a17da2c7ee2a2cfa2275859ab3502a0e1687_d.txt', 'azureml-logs/process_info.json', 'azureml-logs/process_status.json', 'confusion_matrix', 'explanation/7651bcee/classes.interpret.json', 'explanation/7651bcee/eval_data_viz.interpret.json', 'explanation/7651bcee/expected_values.interpret.json', 'explanation/7651bcee/features.interpret.json', 'explanation/7651bcee/global_names/0.interpret.json', 'explanation/7651bcee/global_rank/0.interpret.json', 'explanation/7651bcee/global_values/0.interpret.json', 'explanation/7651bcee/local_importance_values.interpret.json', 'explanation/7651bcee/per_class_names/0.interpret.json', 'explanation/7651bcee/per_class_rank/0.interpret.json', 'explanation/7651bcee/per_class_values/0.interpret.json', 'explanation/7651bcee/rich_metadata.interpret.json', 'explanation/7651bcee/true_ys_viz.interpret.json', 'explanation/7651bcee/visualization_dict.interpret.json', 'explanation/e7f22c13/classes.interpret.json', 'explanation/e7f22c13/eval_data_viz.interpret.json', 'explanation/e7f22c13/expected_values.interpret.json', 'explanation/e7f22c13/features.interpret.json', 'explanation/e7f22c13/global_names/0.interpret.json', 'explanation/e7f22c13/global_rank/0.interpret.json', 'explanation/e7f22c13/global_values/0.interpret.json', 'explanation/e7f22c13/local_importance_values.interpret.json', 'explanation/e7f22c13/per_class_names/0.interpret.json', 'explanation/e7f22c13/per_class_rank/0.interpret.json', 'explanation/e7f22c13/per_class_values/0.interpret.json', 'explanation/e7f22c13/rich_metadata.interpret.json', 'explanation/e7f22c13/true_ys_viz.interpret.json', 'explanation/e7f22c13/visualization_dict.interpret.json', 'explanation/e7f22c13/ys_pred_proba_viz.interpret.json', 'explanation/e7f22c13/ys_pred_viz.interpret.json', 'logs/azureml/108_azureml.log', 'logs/azureml/azureml_automl.log', 'logs/azureml/job_prep_azureml.log', 'logs/azureml/job_release_azureml.log', 'outputs/conda_env_v_1_0_0.yml', 'outputs/env_dependencies.json', 'outputs/internal_cross_validated_models.pkl', 'outputs/model.pkl', 'outputs/pipeline_graph.json', 'outputs/scoring_file_v_1_0_0.py', 'outputs/scoring_file_v_2_0_0.py']\\n                See https://aka.ms/run-logging for more details.\"\n    }\n}",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModelPathNotFoundException\u001b[0m                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-33-4fbe2f525c5e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#TODO: Save the best model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbest_run\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'best_aml_run'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_path\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'outputs/model.joblib'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/core/run.py\u001b[0m in \u001b[0;36mregister_model\u001b[0;34m(self, model_name, model_path, tags, properties, model_framework, model_framework_version, description, datasets, sample_input_dataset, sample_output_dataset, resource_configuration, **kwargs)\u001b[0m\n\u001b[1;32m   2203\u001b[0m             \u001b[0mmodel_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproperties\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_framework\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_framework_version\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2204\u001b[0m             \u001b[0mdescription\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdescription\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdatasets\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdatasets\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0munpack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_input_dataset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_input_dataset\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2205\u001b[0;31m             sample_output_dataset=sample_output_dataset, resource_configuration=resource_configuration, **kwargs)\n\u001b[0m\u001b[1;32m   2206\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2207\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_update_dataset_lineage\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdatasets\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/_run_impl/run_history_facade.py\u001b[0m in \u001b[0;36mregister_model\u001b[0;34m(self, model_name, model_path, tags, properties, model_framework, model_framework_version, asset_id, sample_input_dataset, sample_output_dataset, resource_configuration, **kwargs)\u001b[0m\n\u001b[1;32m    443\u001b[0m             raise ModelPathNotFoundException(\n\u001b[1;32m    444\u001b[0m                 \"\"\"Could not locate the provided model_path {} in the set of files uploaded to the run: {}\n\u001b[0;32m--> 445\u001b[0;31m                 See https://aka.ms/run-logging for more details.\"\"\".format(model_path, str(run_files)))\n\u001b[0m\u001b[1;32m    446\u001b[0m         \u001b[0martifacts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m\"prefix\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0martifact_prefix_id\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    447\u001b[0m         \u001b[0mmetadata_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModelPathNotFoundException\u001b[0m: ModelPathNotFoundException:\n\tMessage: Could not locate the provided model_path outputs/model.joblib in the set of files uploaded to the run: ['accuracy_table', 'automl_driver.py', 'azureml-logs/55_azureml-execution-tvmps_18b637fb64785e7eaac5a3e862b2a17da2c7ee2a2cfa2275859ab3502a0e1687_d.txt', 'azureml-logs/65_job_prep-tvmps_18b637fb64785e7eaac5a3e862b2a17da2c7ee2a2cfa2275859ab3502a0e1687_d.txt', 'azureml-logs/70_driver_log.txt', 'azureml-logs/75_job_post-tvmps_18b637fb64785e7eaac5a3e862b2a17da2c7ee2a2cfa2275859ab3502a0e1687_d.txt', 'azureml-logs/process_info.json', 'azureml-logs/process_status.json', 'confusion_matrix', 'explanation/7651bcee/classes.interpret.json', 'explanation/7651bcee/eval_data_viz.interpret.json', 'explanation/7651bcee/expected_values.interpret.json', 'explanation/7651bcee/features.interpret.json', 'explanation/7651bcee/global_names/0.interpret.json', 'explanation/7651bcee/global_rank/0.interpret.json', 'explanation/7651bcee/global_values/0.interpret.json', 'explanation/7651bcee/local_importance_values.interpret.json', 'explanation/7651bcee/per_class_names/0.interpret.json', 'explanation/7651bcee/per_class_rank/0.interpret.json', 'explanation/7651bcee/per_class_values/0.interpret.json', 'explanation/7651bcee/rich_metadata.interpret.json', 'explanation/7651bcee/true_ys_viz.interpret.json', 'explanation/7651bcee/visualization_dict.interpret.json', 'explanation/e7f22c13/classes.interpret.json', 'explanation/e7f22c13/eval_data_viz.interpret.json', 'explanation/e7f22c13/expected_values.interpret.json', 'explanation/e7f22c13/features.interpret.json', 'explanation/e7f22c13/global_names/0.interpret.json', 'explanation/e7f22c13/global_rank/0.interpret.json', 'explanation/e7f22c13/global_values/0.interpret.json', 'explanation/e7f22c13/local_importance_values.interpret.json', 'explanation/e7f22c13/per_class_names/0.interpret.json', 'explanation/e7f22c13/per_class_rank/0.interpret.json', 'explanation/e7f22c13/per_class_values/0.interpret.json', 'explanation/e7f22c13/rich_metadata.interpret.json', 'explanation/e7f22c13/true_ys_viz.interpret.json', 'explanation/e7f22c13/visualization_dict.interpret.json', 'explanation/e7f22c13/ys_pred_proba_viz.interpret.json', 'explanation/e7f22c13/ys_pred_viz.interpret.json', 'logs/azureml/108_azureml.log', 'logs/azureml/azureml_automl.log', 'logs/azureml/job_prep_azureml.log', 'logs/azureml/job_release_azureml.log', 'outputs/conda_env_v_1_0_0.yml', 'outputs/env_dependencies.json', 'outputs/internal_cross_validated_models.pkl', 'outputs/model.pkl', 'outputs/pipeline_graph.json', 'outputs/scoring_file_v_1_0_0.py', 'outputs/scoring_file_v_2_0_0.py']\n                See https://aka.ms/run-logging for more details.\n\tInnerException None\n\tErrorResponse \n{\n    \"error\": {\n        \"message\": \"Could not locate the provided model_path outputs/model.joblib in the set of files uploaded to the run: ['accuracy_table', 'automl_driver.py', 'azureml-logs/55_azureml-execution-tvmps_18b637fb64785e7eaac5a3e862b2a17da2c7ee2a2cfa2275859ab3502a0e1687_d.txt', 'azureml-logs/65_job_prep-tvmps_18b637fb64785e7eaac5a3e862b2a17da2c7ee2a2cfa2275859ab3502a0e1687_d.txt', 'azureml-logs/70_driver_log.txt', 'azureml-logs/75_job_post-tvmps_18b637fb64785e7eaac5a3e862b2a17da2c7ee2a2cfa2275859ab3502a0e1687_d.txt', 'azureml-logs/process_info.json', 'azureml-logs/process_status.json', 'confusion_matrix', 'explanation/7651bcee/classes.interpret.json', 'explanation/7651bcee/eval_data_viz.interpret.json', 'explanation/7651bcee/expected_values.interpret.json', 'explanation/7651bcee/features.interpret.json', 'explanation/7651bcee/global_names/0.interpret.json', 'explanation/7651bcee/global_rank/0.interpret.json', 'explanation/7651bcee/global_values/0.interpret.json', 'explanation/7651bcee/local_importance_values.interpret.json', 'explanation/7651bcee/per_class_names/0.interpret.json', 'explanation/7651bcee/per_class_rank/0.interpret.json', 'explanation/7651bcee/per_class_values/0.interpret.json', 'explanation/7651bcee/rich_metadata.interpret.json', 'explanation/7651bcee/true_ys_viz.interpret.json', 'explanation/7651bcee/visualization_dict.interpret.json', 'explanation/e7f22c13/classes.interpret.json', 'explanation/e7f22c13/eval_data_viz.interpret.json', 'explanation/e7f22c13/expected_values.interpret.json', 'explanation/e7f22c13/features.interpret.json', 'explanation/e7f22c13/global_names/0.interpret.json', 'explanation/e7f22c13/global_rank/0.interpret.json', 'explanation/e7f22c13/global_values/0.interpret.json', 'explanation/e7f22c13/local_importance_values.interpret.json', 'explanation/e7f22c13/per_class_names/0.interpret.json', 'explanation/e7f22c13/per_class_rank/0.interpret.json', 'explanation/e7f22c13/per_class_values/0.interpret.json', 'explanation/e7f22c13/rich_metadata.interpret.json', 'explanation/e7f22c13/true_ys_viz.interpret.json', 'explanation/e7f22c13/visualization_dict.interpret.json', 'explanation/e7f22c13/ys_pred_proba_viz.interpret.json', 'explanation/e7f22c13/ys_pred_viz.interpret.json', 'logs/azureml/108_azureml.log', 'logs/azureml/azureml_automl.log', 'logs/azureml/job_prep_azureml.log', 'logs/azureml/job_release_azureml.log', 'outputs/conda_env_v_1_0_0.yml', 'outputs/env_dependencies.json', 'outputs/internal_cross_validated_models.pkl', 'outputs/model.pkl', 'outputs/pipeline_graph.json', 'outputs/scoring_file_v_1_0_0.py', 'outputs/scoring_file_v_2_0_0.py']\\n                See https://aka.ms/run-logging for more details.\"\n    }\n}"
          ]
        }
      ],
      "execution_count": 33,
      "metadata": {
        "gather": {
          "logged": 1598431426111
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model Deployment\n",
        "\n",
        "Remember you have to deploy only one of the two models you trained.. Perform the steps in the rest of this notebook only if you wish to deploy this model.\n",
        "\n",
        "TODO: In the cell below, register the model, create an inference config and deploy the model as a web service."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# create inference_config\r\n",
        "from azureml.core.model import InferenceConfig\r\n",
        "from azureml.core.environment import Environment\r\n",
        "\r\n",
        "inference_config = InferenceConfig(entry_script=\"scoring.py\")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1598431435189
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO: In the cell below, send a request to the web service you deployed to test it."
      ],
      "metadata": {
        "collapsed": true,
        "gather": {
          "logged": 1598431657736
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.webservice import Webservice, AciWebservice\r\n",
        "deployment_config = AciWebservice.deploy_configuration(cpu_cores=1, memory_gb = 1)\r\n",
        "\r\n",
        "\r\n",
        "#deploy the model\r\n",
        "service=Model.deploy(workspace=ws,\r\n",
        "                    name=\"heart-failure\",\r\n",
        "                    models=[model],\r\n",
        "                    inference_config=inference_config,\r\n",
        "                    deployment_config=deployment_config)\r\n",
        "service.wait_for_deployment(show_output=True)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1598432707604
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO: In the cell below, print the logs of the web service and delete the service"
      ],
      "metadata": {
        "collapsed": true,
        "gather": {
          "logged": 1598432765711
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(service.get_logs())"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Test the Model"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\r\n",
        "import json\r\n",
        "\r\n",
        "data={\"data\":\r\n",
        "  [{'age': 87.0,\r\n",
        "  'anaemia': 0,\r\n",
        "  'creatinine_phosphokinase': 981,\r\n",
        "  'diabetes': 0,\r\n",
        "  'ejection_fraction': 55,\r\n",
        "  'high_blood_pressure': 1,\r\n",
        "  'platelets': 368000,\r\n",
        "  'serum_creatinine': 3.5,\r\n",
        "  'serum_sodium': 137,\r\n",
        "  'sex': 0,\r\n",
        "  'smoking': 0,\r\n",
        "  'time': 4}]\r\n",
        "  }\r\n",
        "\r\n",
        "input_data=json.dumps(data)\r\n",
        "\r\n",
        "with open(\"data.json\",\"w\") as file:\r\n",
        "    file.write(input_data)\r\n",
        "\r\n",
        "headers={\"Content-Type\":\"application/json\"}\r\n",
        "\r\n",
        "result=requests.post(scoring_uri, input_data, headers=headers)\r\n",
        "print(\"The output is: \",result.json())\r\n",
        "\r\n",
        "result.status_code"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "python3"
    },
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}